"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8247],{3905:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>i,MDXProvider:()=>c,mdx:()=>N,useMDXComponents:()=>u,withMDXComponents:()=>p});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(){return m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},m.apply(this,arguments)}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},m=Object.keys(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(a=0;a<m.length;a++)n=m[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){return function(t){var n=u(t.components);return a.createElement(e,m({},t,{components:n}))}},u=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(i.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},x=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,m=e.originalType,l=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),p=u(n),c=r,x=p["".concat(l,".").concat(c)]||p[c]||s[c]||m;return n?a.createElement(x,d(d({ref:t},i),{},{components:n})):a.createElement(x,d({ref:t},i))}));function N(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var m=n.length,l=new Array(m);l[0]=x;var d={};for(var o in t)hasOwnProperty.call(t,o)&&(d[o]=t[o]);d.originalType=e,d.mdxType="string"==typeof e?e:r,l[1]=d;for(var i=2;i<m;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}x.displayName="MDXCreateElement"},41746:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>m,metadata:()=>d,toc:()=>i});var a=n(83117),r=(n(67294),n(3905));const m={sidebar_position:27},l=void 0,d={unversionedId:"commands/prev",id:"commands/prev",title:"prev",description:"previous | prev",source:"@site/docs/commands/prev.md",sourceDirName:"commands",slug:"/commands/prev",permalink:"/docs/commands/prev",draft:!1,editUrl:"https://github.com/facebook/sapling/tree/main/website/docs/commands/prev.md",tags:[],version:"current",sidebarPosition:27,frontMatter:{sidebar_position:27},sidebar:"tutorialSidebar",previous:{title:"pr",permalink:"/docs/commands/pr"},next:{title:"pull",permalink:"/docs/commands/pull"}},o={},i=[{value:"previous | prev",id:"previous--prev",level:2},{value:"arguments",id:"arguments",level:2}],p={toc:i};function u(e){let{components:t,...n}=e;return(0,r.mdx)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h2",{id:"previous--prev"},"previous | prev"),(0,r.mdx)("p",null,(0,r.mdx)("strong",{parentName:"p"},"check out an ancestor commit")),(0,r.mdx)("p",null,"Update to an ancestor commit of the current commit. When working with a stack\nof commits, you can use ",(0,r.mdx)("inlineCode",{parentName:"p"},"sl previous")," to move down your stack with ease."),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"Use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--newest")," flag to always pick the newest of multiple parents commits.  You can set ",(0,r.mdx)("inlineCode",{parentName:"p"},"amend.alwaysnewest")," to true in your global Sapling config file to make  this the default.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"Use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--merge")," flag to bring along uncommitted changes to the destination  commit.")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("p",{parentName:"li"},"Use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--bookmark")," flag to move to the first ancestor commit with a bookmark."))),(0,r.mdx)("p",null,"Examples:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Move 1 level down the stack:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"sl prev\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Move 2 levels down the stack:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"sl prev 2\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Move to the bottom of the stack:")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"sl prev --bottom\n")),(0,r.mdx)("h2",{id:"arguments"},"arguments"),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"shortname"),(0,r.mdx)("th",{parentName:"tr",align:null},"fullname"),(0,r.mdx)("th",{parentName:"tr",align:null},"default"),(0,r.mdx)("th",{parentName:"tr",align:null},"description"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null}),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--newest")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"always pick the newest parent when a commit has multiple parents")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null}),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--bottom")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"update to the lowest non-public ancestor of the current commit")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null}),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--bookmark")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"update to the first ancestor with a bookmark")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null}),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--no-activate-bookmark")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"do not activate the bookmark on the destination commit")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"-C")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--clean")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"discard uncommitted changes (no backup)")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"-B")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--move-bookmark")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"move active bookmark")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"-m")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--merge")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"merge uncommitted changes")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"-c")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"--check")),(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"false")),(0,r.mdx)("td",{parentName:"tr",align:null},"require clean working directory")))))}u.isMDXComponent=!0}}]);