"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5861],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>l,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>m});var i=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},a.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,i,o=function(e,n){if(null==e)return{};var t,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=i.createContext({}),m=function(e){return function(n){var t=p(n.components);return i.createElement(e,a({},n,{components:t}))}},p=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,r=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),m=p(t),c=o,h=m["".concat(r,".").concat(c)]||m[c]||u[c]||a;return t?i.createElement(h,s(s({ref:n},l),{},{components:t})):i.createElement(h,s({ref:n},l))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=h;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var l=2;l<a;l++)r[l]=t[l];return i.createElement.apply(null,r)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},81393:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=t(83117),o=(t(67294),t(3905));const a={},r="Writing Tests",s={unversionedId:"dev/process/writing_tests",id:"dev/process/writing_tests",title:"Writing Tests",description:"For different languages, or purposes, there are different ways to write tests.",source:"@site/docs/dev/process/writing_tests.md",sourceDirName:"dev/process",slug:"/dev/process/writing_tests",permalink:"/docs/dev/process/writing_tests",draft:!1,editUrl:"https://github.com/facebookexperimental/eden/tree/main/website/docs/dev/process/writing_tests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ZstDelta",permalink:"/docs/dev/internals/zstdelta"}},d={},l=[{value:"<code>.t</code> Tests",id:"t-tests",level:2},{value:"Basic",id:"basic",level:3},{value:"Advanced features",id:"advanced-features",level:3},{value:"Test environment",id:"test-environment",level:4},{value:"Conditional logic",id:"conditional-logic",level:4},{value:"Multiple test cases",id:"multiple-test-cases",level:4},{value:"Matching dynamic output",id:"matching-dynamic-output",level:4},{value:"Best practise",id:"best-practise",level:3},{value:"Silence uninteresting output",id:"silence-uninteresting-output",level:4},{value:"Use drawdag to create commits",id:"use-drawdag-to-create-commits",level:4},{value:"Avoid depending on context",id:"avoid-depending-on-context",level:4},{value:"Rust tests",id:"rust-tests",level:2},{value:"Python tests",id:"python-tests",level:2}],m={toc:l};function p(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"writing-tests"},"Writing Tests"),(0,o.mdx)("p",null,"For different languages, or purposes, there are different ways to write tests."),(0,o.mdx)("p",null,"Unit tests, and doctests are generally good choices for Rust. The\n",(0,o.mdx)("inlineCode",{parentName:"p"},"sapling/")," Python API is not stable, and things are coupled too much\n(ex. the Python bookmark store ",(0,o.mdx)("inlineCode",{parentName:"p"},"bmstore")," object cannot be created without an\nrepo object). Therefore Python unit tests only make more sense for logic\nthat is relatively independent."),(0,o.mdx)("p",null,"Sapling also has a unique kind of tests - ",(0,o.mdx)("inlineCode",{parentName:"p"},".t")," tests. It is a good fit for\ntesting end-user command-line experience."),(0,o.mdx)("h2",{id:"t-tests"},(0,o.mdx)("inlineCode",{parentName:"h2"},".t")," Tests"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},".t")," tests live in ",(0,o.mdx)("inlineCode",{parentName:"p"},"tests/"),". They can be run by\n",(0,o.mdx)("inlineCode",{parentName:"p"},"run-tests.py <.t file name>"),"."),(0,o.mdx)("h3",{id:"basic"},"Basic"),(0,o.mdx)("p",null,"Each test looks like indented blocks of bash scripts with commentary.\nFor example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"Test 'echo' works. This line is a comment.\n\n  $ echo A\n  A\n")),(0,o.mdx)("p",null,"The test engine will execute ",(0,o.mdx)("inlineCode",{parentName:"p"},"echo A")," and verify its output is ",(0,o.mdx)("inlineCode",{parentName:"p"},"A"),"."),(0,o.mdx)("p",null,"The ",(0,o.mdx)("inlineCode",{parentName:"p"},".t")," format also supports multi-line commands, Python scripts and\ntesting exit code:"),(0,o.mdx)("p",null,"Multi-line commands (with heredoc):"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ sha1sum << EOF\n  > hello\n  > EOF\n  f572d396fae9206628714fb2ce00f72e94f2258f\n")),(0,o.mdx)("p",null,"Python:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'>>> import sys\n>>> for i in "hello world".split():\n...     sys.stdout.write("%s\\n" % i)\nhello\nworld\n')),(0,o.mdx)("p",null,"Exit code can be tested using ","[code]",":"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ false\n  [1]\n")),(0,o.mdx)("p",null,"To get started with creating a test, you can set ",(0,o.mdx)("inlineCode",{parentName:"p"},"PS1='$ '")," in your shell\nand experiment with the reproducing commands. When done, just copy them to\na ",(0,o.mdx)("inlineCode",{parentName:"p"},".t")," file and prefix them with two spaces."),(0,o.mdx)("p",null,"You can also just edit the ",(0,o.mdx)("inlineCode",{parentName:"p"},"$")," command lines in ",(0,o.mdx)("inlineCode",{parentName:"p"},"test-foo.t")," directly, and\nuse ",(0,o.mdx)("inlineCode",{parentName:"p"},"run-tests.py -i test-foo.t")," to fill in the output. This is also a good\nway to edit tests."),(0,o.mdx)("h3",{id:"advanced-features"},"Advanced features"),(0,o.mdx)("h4",{id:"test-environment"},"Test environment"),(0,o.mdx)("p",null,"A test starts inside a temporary directory, which can be obtained using\n",(0,o.mdx)("inlineCode",{parentName:"p"},"TESTTMP")," environment variable. The ",(0,o.mdx)("inlineCode",{parentName:"p"},"TESTDIR")," environment variable contains\nthe path to the ",(0,o.mdx)("inlineCode",{parentName:"p"},"tests/")," directory, which can be handy to refer to other\nscripts."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"tests/tinit.sh")," is sourced. Functions defined in it can be used to make\ntests shorter. For example"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"Use functions in tinit.sh:\n  $ setconfig lfs.url=file://$TESTTMP/lfs lfs.threshold=10B\n  $ enable lfs rebase\n  $ newrepo\n")),(0,o.mdx)("p",null,"Equvilent to:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ cat >> $HGRCPATH << EOF\n  > [extensions]\n  > lfs=\n  > rebase=\n  > [lfs]\n  > url=file://$TESTTMP/lfs\n  > threshold=10B\n  > EOF\n  $ hg init repo1\n  $ cd repo1\n")),(0,o.mdx)("h4",{id:"conditional-logic"},"Conditional logic"),(0,o.mdx)("p",null,"Certain tests might require some features (ex. POSIX, case insensitive\nfilesystem, or certain programs to be installed). Run ",(0,o.mdx)("inlineCode",{parentName:"p"},"python tests/hghave\n--list")," to get a list of features that can be tested. Example use in ",(0,o.mdx)("inlineCode",{parentName:"p"},".t"),"\nlooks like"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"#require fsmonitor icasefs\nThe test will be skipped if any of the requirement is not sastified.\n\n#if symlink\nThis block is skipped if symlink is not supported.\n  $ ln -s a b\n#else\nThis block is skipped if symlink is supported.\n  $ cp a b\n#endif\n")),(0,o.mdx)("p",null,"Features can be prefixed with ",(0,o.mdx)("inlineCode",{parentName:"p"},"no-")," meaning it should not be selected"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"#require no-fsmonitor\nSkip this test on 'run-tests.py --watchman'.\n")),(0,o.mdx)("h4",{id:"multiple-test-cases"},"Multiple test cases"),(0,o.mdx)("p",null,"Sometimes it's feasible to reuse the most of the test code for different code\npaths. ",(0,o.mdx)("inlineCode",{parentName:"p"},"#testcases")," can be used to define test case names that can be used\nfor feature testing"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"#testcases innodb rocksdb\n\n#if innodb\n  $ setconfig db.engine=inno\n#else\n  $ setconfig db.engine=rocks\n#endif\n")),(0,o.mdx)("p",null,"This runs the test once for each test case."),(0,o.mdx)("h4",{id:"matching-dynamic-output"},"Matching dynamic output"),(0,o.mdx)("p",null,"To filter noisy output that changes on each run (ex. timestamps), use glob\npatterns and put a space and ",(0,o.mdx)("inlineCode",{parentName:"p"},"(glob)")," at the end of the output line"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ hg parents -r null --time\n  time: real * secs (user * sys *) (glob)\n")),(0,o.mdx)("p",null,"You can match different output based on which features are available. Use\n",(0,o.mdx)("inlineCode",{parentName:"p"},"(feature-name !)")," to mark a line as required if the feature was turned on,\nor optional otherwise::"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ hg debugfsinfo | grep eden\n  fstype: eden (eden !)\n")),(0,o.mdx)("p",null,"Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"(?)")," to mark output as optional unconditionally"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ maybe-output-foobar\n  foobar (?)\n")),(0,o.mdx)("h3",{id:"best-practise"},"Best practise"),(0,o.mdx)("h4",{id:"silence-uninteresting-output"},"Silence uninteresting output"),(0,o.mdx)("p",null,"Not all output is interesting to the test. For example, when testing\n",(0,o.mdx)("inlineCode",{parentName:"p"},"hg log"),", the output of ",(0,o.mdx)("inlineCode",{parentName:"p"},"hg update")," is not interesting. Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"-q"),"\nto silence it"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ hg update -q commit-x\n")),(0,o.mdx)("p",null,"This makes the test cleaner and easier to codemod ",(0,o.mdx)("inlineCode",{parentName:"p"},"update")," output."),(0,o.mdx)("p",null,"Similarity, avoid testing revision numbers, or branch names, if they are not\ninteresting to the test. It will make deprecation of those features easier."),(0,o.mdx)("h4",{id:"use-drawdag-to-create-commits"},"Use drawdag to create commits"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"hg debugdrawdag")," (or ",(0,o.mdx)("inlineCode",{parentName:"p"},"drawdag")," defined in ",(0,o.mdx)("inlineCode",{parentName:"p"},"tinit.sh"),") can be used to\ncreate commits in a more readable, and efficient way. For example::"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ echo X > X\n  $ hg commit -m X -A X\n  $ echo Y > Y\n  $ hg commit -m Y -A Y\n  $ hg update '.^'\n  $ echo Z > Z\n  $ hg commit -m Z -A Z\n")),(0,o.mdx)("p",null,"Can be rewritten as"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"  $ drawdag <<'EOS'\n  > Y Z    # This is a comment.\n  > |/     # 'drawdag' defines env-var \"$X\", \"$Y\", \"$Z\" as commit hashes\n  > X      # 'hg debugdrawdag' defines tags X, Y, Z instead\n  > EOS\n  $ hg update $Z\n")),(0,o.mdx)("p",null,'Comments can be used to define relationship between commits, file contents, and\n"copy from" source'),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},'  $ drawdag <<\'EOS\'\n  >   D  # amend: C -> D\n  >   |  # (Mark commit D as "amended from" commit C)\n  >   |\n  > C |  # C/src/main.cpp= (deleted)\n  > |/   # (Delete the src/main.cpp file in commit C)\n  > |\n  > B    # B/src/main.cpp=int main()\\n{} (renamed from src/main.c)\n  > |    # (In commit "B", "src/main.cpp" has content "int main()\\n{}",\n  > |    #  and is marked as "renamed from" src/main.c.\n  > |    #  "(copied from <path>)" can be used too)\n  > |\n  > A    # A/src/main.c=int main[] = {1,2};\n  >      # (In commit "A", "src/main.c" has content "int main[] = {1, 2};")\n  > EOS\n')),(0,o.mdx)("h4",{id:"avoid-depending-on-context"},"Avoid depending on context"),(0,o.mdx)("p",null,"As the test file grows longer, it could become difficult to follow or modify.\nIt's often caused by commands depending on the context (ex. the current repo\nstate, or the current directory) and the context is not obvious by just\nreading the code. Here are some tips to make tests easier to understand:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},"Avoid ",(0,o.mdx)("inlineCode",{parentName:"li"},"..")," in filesystem paths. Instead of ",(0,o.mdx)("inlineCode",{parentName:"li"},"cd ../repo1"),",\nuse ",(0,o.mdx)("inlineCode",{parentName:"li"},"cd $TESTTMP/repo1"),"."),(0,o.mdx)("li",{parentName:"ul"},"Avoid using a list of ",(0,o.mdx)("inlineCode",{parentName:"li"},"hg commit"),", ",(0,o.mdx)("inlineCode",{parentName:"li"},"hg update")," to create a repo.\nUse drawdag if possible. If drawdag cannot be used, insert a ",(0,o.mdx)("inlineCode",{parentName:"li"},"hg log -G"),"\ncommand to print the repo content out.")),(0,o.mdx)("h2",{id:"rust-tests"},"Rust tests"),(0,o.mdx)("p",null,"Follow the Rust community standard."),(0,o.mdx)("p",null,"For modules that are likely to be used by other developers, Rustdoc is a good\nchoice to show examples about how to use a function. Especially when it's not\nobvious."),(0,o.mdx)("p",null,"For native Rust code, prefer unit tests inside modules"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre"},"/* module code */\n\n#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn test_feature_x() {\n        assert!(...);\n    }\n}\n")),(0,o.mdx)("p",null,"Use ",(0,o.mdx)("inlineCode",{parentName:"p"},"tests/")," for independent integration tests, and ",(0,o.mdx)("inlineCode",{parentName:"p"},"benches/")," for\nbenchmarks."),(0,o.mdx)("h2",{id:"python-tests"},"Python tests"),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"run-tests.py")," supports not only ",(0,o.mdx)("inlineCode",{parentName:"p"},".t")," tests, but also standard Python unit\ntests in ",(0,o.mdx)("inlineCode",{parentName:"p"},".py")," files. See ",(0,o.mdx)("inlineCode",{parentName:"p"},"test-lock.py")," for an example."),(0,o.mdx)("p",null,"Python functions can have doctests, run by ",(0,o.mdx)("inlineCode",{parentName:"p"},"run-tests.py test-doctest.py"),".\nSee ",(0,o.mdx)("a",{parentName:"p",href:"https://github.com/facebook/sapling/commit/D8221079"},(0,o.mdx)("inlineCode",{parentName:"a"},"D822107"))," for an example."))}p.isMDXComponent=!0}}]);