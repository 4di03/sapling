"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1983],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>i,MDXProvider:()=>u,mdx:()=>g,useMDXComponents:()=>p,withMDXComponents:()=>s});var a=t(67294);function m(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(){return l=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},l.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){m(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,m=function(e,n){if(null==e)return{};var t,a,m={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(m[t]=e[t]);return m}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(m[t]=e[t])}return m}var i=a.createContext({}),s=function(e){return function(n){var t=p(n.components);return a.createElement(e,l({},n,{components:t}))}},p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},x=a.forwardRef((function(e,n){var t=e.components,m=e.mdxType,l=e.originalType,o=e.parentName,i=d(e,["components","mdxType","originalType","parentName"]),s=p(t),u=m,x=s["".concat(o,".").concat(u)]||s[u]||c[u]||l;return t?a.createElement(x,r(r({ref:n},i),{},{components:t})):a.createElement(x,r({ref:n},i))}));function g(e,n){var t=arguments,m=n&&n.mdxType;if("string"==typeof e||m){var l=t.length,o=new Array(l);o[0]=x;var r={};for(var d in n)hasOwnProperty.call(n,d)&&(r[d]=n[d]);r.originalType=e,r.mdxType="string"==typeof e?e:m,o[1]=r;for(var i=2;i<l;i++)o[i]=t[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}x.displayName="MDXCreateElement"},920:(e,n,t)=>{t.d(n,{RJ:()=>i,Xj:()=>r,bv:()=>d,mY:()=>o,nk:()=>s});var a=t(67294),m=t(44996),l=t(50941);function o(e){let{name:n,linkText:t}=e;const l=function(e){switch(e){case"go":return"goto";case"isl":return"web"}return e}(n),o=null!=t?t:n;return a.createElement("a",{href:(0,m.default)("/docs/commands/"+l)},a.createElement("code",null,o))}function r(e){let{name:n}=e;return a.createElement(o,{name:n,linkText:"sl "+n})}function d(){return a.createElement("p",{style:{textAlign:"center"}},a.createElement("img",{src:(0,m.default)("/img/reviewstack-demo.gif"),width:800,align:"center"}))}function i(e){let{alt:n,light:t,dark:o}=e;return a.createElement(l.Z,{alt:n,sources:{light:(0,m.default)(t),dark:(0,m.default)(o)}})}function s(e){let{src:n}=e;return a.createElement("video",{controls:!0},a.createElement("source",{src:(0,m.default)(n)}))}},63904:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>s});var a=t(83117),m=(t(67294),t(3905)),l=t(920);const o={sidebar_position:10},r="Basic commands",d={unversionedId:"overview/basic-commands",id:"overview/basic-commands",title:"Basic commands",description:"Here are the most commonly used commands in Sapling:",source:"@site/docs/overview/basic-commands.md",sourceDirName:"overview",slug:"/overview/basic-commands",permalink:"/docs/overview/basic-commands",draft:!1,editUrl:"https://github.com/facebook/sapling/tree/main/website/docs/overview/basic-commands.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/overview/intro"},next:{title:"Smartlog",permalink:"/docs/overview/smartlog"}},i={},s=[{value:"Working with commits",id:"working-with-commits",level:3},{value:"Working with your checkout",id:"working-with-your-checkout",level:3},{value:"Cloning and checking out",id:"cloning-and-checking-out",level:2},{value:"Clone",id:"clone",level:4},{value:"Goto/Checkout",id:"gotocheckout",level:4},{value:"Working copy",id:"working-copy",level:2},{value:"Status",id:"status",level:4},{value:"Diff",id:"diff",level:4},{value:"Add/Remove/Forget",id:"addremoveforget",level:4},{value:"Move/Copy",id:"movecopy",level:4},{value:"Clean",id:"clean",level:4},{value:"Revert",id:"revert",level:4},{value:"Making commits",id:"making-commits",level:2},{value:"Commit",id:"commit",level:4},{value:"Viewing history",id:"viewing-history",level:2},{value:"Show",id:"show",level:4},{value:"Log",id:"log",level:4}],p={toc:s};function u(e){let{components:n,...t}=e;return(0,m.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,m.mdx)("h1",{id:"basic-commands"},"Basic commands"),(0,m.mdx)("p",null,"Here are the most commonly used commands in Sapling:"),(0,m.mdx)("h3",{id:"working-with-commits"},"Working with commits"),(0,m.mdx)("table",null,(0,m.mdx)("thead",{parentName:"table"},(0,m.mdx)("tr",{parentName:"thead"},(0,m.mdx)("th",{parentName:"tr",align:null},"Get"),(0,m.mdx)("th",{parentName:"tr",align:null},"View"),(0,m.mdx)("th",{parentName:"tr",align:null},"Change"),(0,m.mdx)("th",{parentName:"tr",align:null},"Move"),(0,m.mdx)("th",{parentName:"tr",align:null},"Remove"),(0,m.mdx)("th",{parentName:"tr",align:null},"Fix"),(0,m.mdx)("th",{parentName:"tr",align:null},"Stack"))),(0,m.mdx)("tbody",{parentName:"table"},(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"clone",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"sl",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"amend",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"rebase",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"hide",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"uncommit",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"fold",mdxType:"Command"}))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"pull",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"show",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"metaedit",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"graft",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"unhide",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"unamend",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"split",mdxType:"Command"}))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"log",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"undo",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"absorb",mdxType:"Command"}))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"web",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"redo",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"histedit",mdxType:"Command"}))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"restack",mdxType:"Command"}))))),(0,m.mdx)("h3",{id:"working-with-your-checkout"},"Working with your checkout"),(0,m.mdx)("table",null,(0,m.mdx)("thead",{parentName:"table"},(0,m.mdx)("tr",{parentName:"thead"},(0,m.mdx)("th",{parentName:"tr",align:null},"View"),(0,m.mdx)("th",{parentName:"tr",align:null},"Move"),(0,m.mdx)("th",{parentName:"tr",align:null},"Change"),(0,m.mdx)("th",{parentName:"tr",align:null},"Fix"),(0,m.mdx)("th",{parentName:"tr",align:null},"Save"))),(0,m.mdx)("tbody",{parentName:"table"},(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"status",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"goto",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"add",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"revert",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"commit",mdxType:"Command"}))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"diff",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"next",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"remove",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"clean",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"shelve",mdxType:"Command"}))),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"prev",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"forget",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null})),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"move",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null})),(0,m.mdx)("tr",{parentName:"tbody"},(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null},(0,m.mdx)(l.mY,{name:"copy",mdxType:"Command"})),(0,m.mdx)("td",{parentName:"tr",align:null}),(0,m.mdx)("td",{parentName:"tr",align:null})))),(0,m.mdx)("h1",{id:"examples"},"Examples"),(0,m.mdx)("p",null,"Many of Sapling\u2019s basic commands will be familiar, and perhaps even unremarkable, to existing Git and Mercurial users.  For example, Sapling supports ",(0,m.mdx)(l.mY,{name:"clone",mdxType:"Command"}),", ",(0,m.mdx)(l.mY,{name:"checkout",mdxType:"Command"}),", ",(0,m.mdx)(l.mY,{name:"commit",mdxType:"Command"}),", ",(0,m.mdx)(l.mY,{name:"rebase",mdxType:"Command"}),", ",(0,m.mdx)(l.mY,{name:"push",mdxType:"Command"}),", etc. The goal was not to reinvent the wheel, but to make an intuitive, yet powerful, source control system."),(0,m.mdx)("p",null,"This document is a casual introduction to some of the basic commands. It is not comprehensive, nor is it a walkthrough of an end-to-end workflow (see the ",(0,m.mdx)("a",{parentName:"p",href:"/docs/introduction/"},"Introduction")," for a simple, end-to-end example). Commands with interesting nuance or for more advanced cases are covered in other documents."),(0,m.mdx)("p",null,"Many of these examples use the ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl smartlog")," output to explain the repo state. See the ",(0,m.mdx)("a",{parentName:"p",href:"./smartlog"},"Smartlog doc")," for an overview of the output format."),(0,m.mdx)("h2",{id:"cloning-and-checking-out"},"Cloning and checking out"),(0,m.mdx)("h4",{id:"clone"},"Clone"),(0,m.mdx)("p",null,"Clone the repo using the ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl clone")," command."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"# Clones into a 'sapling' directory.\n$ sl clone https://github.com/facebook/sapling\nremote: Enumerating objects: 640374, done.\nremote: Counting objects: 100% (5233/5233), done.\nremote: Compressing objects: 100% (3228/3228), done.\nremote: Total 640374 (delta 1749), reused 5139 (delta 1669), pack-reused 635141\nReceiving objects: 100% (640374/640374), 155.18 MiB | 15.17 MiB/s, done.\nResolving deltas: 100% (431325/431325), done.\nFrom https://github.com/facebook/sapling\n * [new ref]               b8422460814900d8f978a8a34a99ae83c6735a70 -> remote/main\n5689 files updated, 0 files merged, 0 files removed, 0 files unresolved\n\n# Clones into a 'some_directory' directory.\n$ sl clone https://github.com/facebook/sapling some_directory\n")),(0,m.mdx)("admonition",{type:"note"},(0,m.mdx)("p",{parentName:"admonition"},"For Git support, Sapling uses Git under the hood for clones, pushes, and pulls. Hence the output matches Git.")),(0,m.mdx)("p",null,"Related topics: ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/push-pull"},"Push/Pull"),", Sparse"),(0,m.mdx)("h4",{id:"gotocheckout"},"Goto/Checkout"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl goto")," or ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl go")," allows you to checkout a specific commit.  See the ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/navigation"},"Navigation")," document for a variety of other ways to move around your repository."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"# You can checkout commits by their long or short hash.\n# '@' in smartlog indicates your current checkout location.\n$ sl goto 71f7ac009\n$ sl\no  b84224608  13 minutes ago  remote/main\n\u2577\n@  71f7ac009  Today at 10:10  john\n\u2577  scsc: fix build on Windows\n\u2577\n\u2577 o  15de72785  35 seconds ago  mary  my_feature\n\u256d\u2500\u256f  Implement glorious features\n\u2502\no  a555d064c  Wednesday at 09:06\n\u2502\n~\n\n# You can checkout remote bookmark commits, either by `name` or by `remote/name`.\n$ sl goto main\n\n# You can checkout commits pointed at by local bookmarks.\n$ sl goto my_feature\n")),(0,m.mdx)("p",null,"You can checkout a commit while you have pending changes, as long as the checkout does not change files with pending changes."),(0,m.mdx)("p",null,"Notable options:"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"-C/--clean"),"  will remove any pending changes.")),(0,m.mdx)("p",null,"Related topics: ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/navigation"},"Navigation"),", ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/navigation#topbottom"},"top/bottom"),", ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/push-pull"},"pull")),(0,m.mdx)("h2",{id:"working-copy"},"Working copy"),(0,m.mdx)("h4",{id:"status"},"Status"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl status")," or ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl st")," shows a list of your current uncommitted files."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ vim build.sh\n$ sl st\nM build.sh\n\n$ vim new_file.txt\n$ sl st\nM build.sh\n? new_file.txt\n\n# File state indicators:\n#   M - modified file\n#   A - new file that has been marked with 'sl add'\n#   R - deleted file that has been marked with 'sl remove'\n#   ! - deleted file that has not yet been marked with 'sl remove'\n#   ? - new file that has not yet been marked with 'sl add'\n")),(0,m.mdx)("p",null,"Unlike Git, Sapling does not use a staging area, so any non-? files in the status output will be committed when you run ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl commit"),"."),(0,m.mdx)("p",null,"Notable options:"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"--copies")," shows which files have been marked as moved/copied."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"--change COMMIT")," shows the files changed in a given commit.")),(0,m.mdx)("h4",{id:"diff"},"Diff"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl diff")," shows you the diff output for your current uncommitted changes."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},'$ sl diff\ndiff --git a/build.sh b/build.sh\n--- a/build.sh\n+++ b/build.sh\n@@ -9,6 +9,10 @@\n     PATH="$TOOLCHAIN_DIR:$PATH"\n fi\n\n+if [[ -n $TEST_ENVIRONMENT ]]; then\n+    exit 1\n+fi\n+\n SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")\n\n# Specify a file to only see its changes.\n$ sl diff file.txt\n')),(0,m.mdx)("p",null,"The diff output is compatible with Git\u2019s diff format."),(0,m.mdx)("p",null,"Related topics: ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/basic-commands#show"},"Show")),(0,m.mdx)("h4",{id:"addremoveforget"},"Add/Remove/Forget"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl add/remove/forget")," are used to add new files, remove old files, and undo added files, respectively. Only files marked M/A/R will be committed during ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl commit"),"."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ sl st\n? new_file.txt\n\n$ sl add new_file.txt\n$ sl st\nA new_file.txt\n\n$ rm old_file.txt\n$ sl st\nA new_file.txt\n! old_file.txt\n\n$ sl rm old_file.txt\n$ sl st\nA new_file.txt\nR old_file.txt\n\n$ sl forget new_file.txt\n$ sl st\n? new_file.txt\nR old_file.txt\n")),(0,m.mdx)("h4",{id:"movecopy"},"Move/Copy"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl mv/cp")," can be used to rename or copy a file."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ sl mv old_name.txt new_name.txt\n$ sl st\nA new_name.txt\nR old_name.txt\n\n# Sapling-only repos track the move/copy, which can be viewed with sl st --copies.\n$ sl st --copies\nA new_name.txt\n  old_name.txt\nR old_name.txt\n")),(0,m.mdx)("p",null,"When using Git support, file renames are not recorded since Git does not record this information. When using a normal Sapling repository, the rename/copy will be tracked inside Sapling and used to show accurate log and blame output for the file."),(0,m.mdx)("p",null,"Related topics: AutoMove"),(0,m.mdx)("h4",{id:"clean"},"Clean"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl clean")," deletes any untracked files (",(0,m.mdx)("inlineCode",{parentName:"p"},"?")," in status) in your working copy."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ sl st\n? temp_file\n\n$ sl clean\n$ sl st\n")),(0,m.mdx)("h4",{id:"revert"},"Revert"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl revert")," will revert any pending changes in your working copy."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ sl st\nM build.sh\n\n$ sl revert build.sh\n$ sl st\n")),(0,m.mdx)("p",null,"Notable options:"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"--all")," will revert all pending changes, so you don\u2019t need to specify file names."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"--rev COMMIT")," will change the file contents to match their contents in the given commit."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"--interactive")," will open an interactive editor for choosing which files or lines to revert.")),(0,m.mdx)("h2",{id:"making-commits"},"Making commits"),(0,m.mdx)("h4",{id:"commit"},"Commit"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl commit")," commits your pending changes and prompts you for a commit message.  While there is no staging area, the powerful ",(0,m.mdx)("inlineCode",{parentName:"p"},"--interactive")," option is used to select specific files or lines you want committed."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ sl st\nM build.sh\n$ sl commit\n# ...opens your editor so you can write a message...\n\n$ sl\n  @  c178f2e7f  1 second ago mary\n\u256d\u2500\u256f  Fix build.sh\n\u2502\no  b84224608  52 minutes ago  remote/main\n\u2502\n~\n")),(0,m.mdx)("p",null,"Notable options:"),(0,m.mdx)("ul",null,(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"-m/--message MSG")," allows specifying a message instead of opening an editor."),(0,m.mdx)("li",{parentName:"ul"},(0,m.mdx)("inlineCode",{parentName:"li"},"--interactive")," will open an interactive editor for choosing which files or lines to commit.  Lines/files not chosen remain as pending changes.")),(0,m.mdx)("p",null,"Related topics: Amend"),(0,m.mdx)("h2",{id:"viewing-history"},"Viewing history"),(0,m.mdx)("p",null,"Related: ",(0,m.mdx)("a",{parentName:"p",href:"/docs/overview/smartlog"},"smartlog")),(0,m.mdx)("h4",{id:"show"},"Show"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl show")," shows the log message and textual diff for the current or given commit."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},'$ sl show\ncommit:   c178f2e7ff20447532370599051c1f1939f9dcb6   (@)\nparent:   b8422460814900d8f978a8a34a99ae83c6735a70\nuser:     Mary Smith <mary@example.com>\ndate:     Mon, 15 Aug 2022 16:56:36 -0700\n\n    My new commit\n\ndiff --git a/build.sh b/build.sh\n--- a/build.sh\n+++ b/build.sh\n@@ -9,6 +9,10 @@\n     PATH="$TOOLCHAIN_DIR:$PATH"\n fi\n\n+if [[ -n $TEST_ENVIRONMENT ]]; then\n+    exit 1\n+fi\n+\n SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")\n\n# Can also show a particular commit\n$ sl show COMMIT\n')),(0,m.mdx)("h4",{id:"log"},"Log"),(0,m.mdx)("p",null,(0,m.mdx)("inlineCode",{parentName:"p"},"sl log")," shows the commit history starting at your current commit."),(0,m.mdx)("p",null,"Unlike in Git and Mercurial, the ",(0,m.mdx)("inlineCode",{parentName:"p"},"log")," command in Sapling is rarely used. Instead, ",(0,m.mdx)("inlineCode",{parentName:"p"},"smartlog")," is preferred for day-to-day development and understanding your repository.  ",(0,m.mdx)("inlineCode",{parentName:"p"},"sl log")," is really only used when inspecting the deeper history of the repository or a file."),(0,m.mdx)("pre",null,(0,m.mdx)("code",{parentName:"pre",className:"language-sl-shell-example"},"$ sl log\nchangeset:   c178f2e7ff20447532370599051c1f1939f9dcb6   (@)\nuser:        Mary Smith <mary@example.com>\ndate:        Mon, 15 Aug 2022 16:56:36 -0700\nsummary:     My new commit\n\nchangeset:   b8422460814900d8f978a8a34a99ae83c6735a70\nuser:        John Adams <john@example.com>\ndate:        Mon, 15 Aug 2022 16:04:08 -0700\nsummary:     globalrevs: lookup globalrevs over edenapi\n\nchangeset:   98f29d99b8b8b8a6562e98faa913a650bd0f0302\nuser:        John Adams <john@example.com>\ndate:        Mon, 15 Aug 2022 15:14:49 -0700\nsummary:     remove glob from scuba logging test\n\nchangeset:   6bec7b92894495229635f481ba01895c869c2063\nuser:        Mary Smith <mary@example.com>\ndate:        Mon, 15 Aug 2022 14:27:14 -0700\nsummary:     fix monitoring for tailer\n\n# Specify a file or directory to see its history\n$ sl log src/build.rs\n\n# Use -fr with a commit to show the history starting from there.\n$ sl log -fr COMMIT src/build.rs\n")))}u.isMDXComponent=!0}}]);