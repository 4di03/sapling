"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7093],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>p,MDXProvider:()=>c,mdx:()=>x,useMDXComponents:()=>s,withMDXComponents:()=>d});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(){return o=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},o.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),d=function(e){return function(n){var t=s(n.components);return r.createElement(e,o({},n,{components:t}))}},s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=m(e,["components","mdxType","originalType","parentName"]),d=s(t),c=a,f=d["".concat(l,".").concat(c)]||d[c]||u[c]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function x(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=f;var i={};for(var m in n)hasOwnProperty.call(n,m)&&(i[m]=n[m]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},54102:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>l,default:()=>s,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(83117),a=(t(67294),t(3905));const o={sidebar_position:8},l=void 0,i={unversionedId:"commands/clone",id:"commands/clone",title:"clone",description:"clone",source:"@site/docs/commands/clone.md",sourceDirName:"commands",slug:"/commands/clone",permalink:"/docs/commands/clone",draft:!1,editUrl:"https://github.com/facebookexperimental/eden/tree/main/website/docs/commands/clone.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"clean",permalink:"/docs/commands/clean"},next:{title:"commit",permalink:"/docs/commands/commit"}},m={},p=[{value:"clone",id:"clone",level:2},{value:"arguments",id:"arguments",level:2}],d={toc:p};function s(e){let{components:n,...t}=e;return(0,a.mdx)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"clone"},"clone"),(0,a.mdx)("p",null,(0,a.mdx)("strong",{parentName:"p"},"make a copy of an existing repository")),(0,a.mdx)("p",null,"Create a copy of an existing repository in a new directory."),(0,a.mdx)("p",null,"If no destination directory name is specified, it defaults to the\nbasename of the source."),(0,a.mdx)("p",null,"The location of the source is added to the new repository's\nconfig file as the default to be used for future pulls."),(0,a.mdx)("p",null,"Sources are typically URLs. The following URL schemes are assumed\nto be a Git repo: ",(0,a.mdx)("inlineCode",{parentName:"p"},"git"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"git+file"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"git+ftp"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"git+ftps"),",\n",(0,a.mdx)("inlineCode",{parentName:"p"},"git+http"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"git+https"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"git+ssh"),", ",(0,a.mdx)("inlineCode",{parentName:"p"},"ssh")," and ",(0,a.mdx)("inlineCode",{parentName:"p"},"https"),"."),(0,a.mdx)("p",null,"Scp-like URLs of the form ",(0,a.mdx)("inlineCode",{parentName:"p"},"user@host:path")," are converted to\n",(0,a.mdx)("inlineCode",{parentName:"p"},"ssh://user@host/path"),"."),(0,a.mdx)("p",null,"Other URL schemes are assumed to point to an SaplingRemoteAPI capable repo."),(0,a.mdx)("p",null,"The ",(0,a.mdx)("inlineCode",{parentName:"p"},"--git")," option forces the source to be interpreted as a Git repo."),(0,a.mdx)("p",null,"To check out a particular version, use ",(0,a.mdx)("inlineCode",{parentName:"p"},"-u/--update"),", or\n",(0,a.mdx)("inlineCode",{parentName:"p"},"-U/--noupdate")," to create a clone with no working copy."),(0,a.mdx)("p",null,"If specified, the ",(0,a.mdx)("inlineCode",{parentName:"p"},"--enable-profile")," option should refer to a\nsparse profile within the source repo to filter the contents of\nthe new working copy. See ",(0,a.mdx)("inlineCode",{parentName:"p"},"sl help -e sparse")," for details."),(0,a.mdx)("p",null,"Examples:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"clone a remote repository to a new directory named some_repo:")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"sl clone https://example.com/some_repo\n")),(0,a.mdx)("p",null,"As an experimental feature, if specified the source URL fragment\nis persisted as the repo's main bookmark."),(0,a.mdx)("p",null,"Returns 0 on success."),(0,a.mdx)("h2",{id:"arguments"},"arguments"),(0,a.mdx)("table",null,(0,a.mdx)("thead",{parentName:"table"},(0,a.mdx)("tr",{parentName:"thead"},(0,a.mdx)("th",{parentName:"tr",align:null},"shortname"),(0,a.mdx)("th",{parentName:"tr",align:null},"fullname"),(0,a.mdx)("th",{parentName:"tr",align:null},"default"),(0,a.mdx)("th",{parentName:"tr",align:null},"description"))),(0,a.mdx)("tbody",{parentName:"table"},(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"-U")),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"--noupdate")),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"false")),(0,a.mdx)("td",{parentName:"tr",align:null},"clone an empty working directory")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"-u")),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"--updaterev")),(0,a.mdx)("td",{parentName:"tr",align:null}),(0,a.mdx)("td",{parentName:"tr",align:null},"revision or branch to check out")),(0,a.mdx)("tr",{parentName:"tbody"},(0,a.mdx)("td",{parentName:"tr",align:null}),(0,a.mdx)("td",{parentName:"tr",align:null},(0,a.mdx)("inlineCode",{parentName:"td"},"--enable-profile")),(0,a.mdx)("td",{parentName:"tr",align:null}),(0,a.mdx)("td",{parentName:"tr",align:null},"enable a sparse profile")))))}s.isMDXComponent=!0}}]);