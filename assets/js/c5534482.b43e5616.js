"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["8781"],{58688:function(e,n,t){let r;t.r(n),t.d(n,{metadata:()=>a,contentTitle:()=>v,default:()=>y,assets:()=>R,toc:()=>E,frontMatter:()=>w});var a=JSON.parse('{"id":"dev/internals/drawdag","title":"DrawDag","description":"DrawDag provides an intuitive way to create commit graph for tests.","source":"@site/docs/dev/internals/drawdag.md","sourceDirName":"dev/internals","slug":"/dev/internals/drawdag","permalink":"/docs/dev/internals/drawdag","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/dev/internals/drawdag.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Bisect-Based Copy Tracing","permalink":"/docs/dev/internals/copytracing"},"next":{"title":"IndexedLog","permalink":"/docs/dev/internals/indexedlog"}}'),i=t("85893"),s=t("50065"),l=t("67294"),o=t("40460"),c=t.n(o),d=t("10251"),h=t.n(d);let u=new(t("58192")).WU;async function g(){return await u.runExclusive(async()=>{if(r)return r;let e=await t.e("1576").then(t.bind(t,78320));return await e.default(),r=e,e})}function m(e){let{initValue:n,style:t,padding:r=10,onDagParentsChange:a}=e,[s,o]=l.useState(()=>({input:(n??"").replace(/^\n+|\s+$/g,""),parents:new Map,comments:"",bindings:null,dropped:!1}));l.useEffect(()=>(g().then(e=>{!s.bindings&&!s.dropped&&o(n=>({...n,bindings:e}))}).catch(console.error),function(){s.dropped=!0}),[]),l.useEffect(()=>{let{bindings:e,input:n,dropped:t,comments:r}=s;if(!!e&&!t){if(a)try{let t=n.replace(/#.*$/gm,""),i=n.replace(/.*#$/gm,""),l=e.drawdag(t);(!h()(s.parents,l)||r!==i)&&(a({parents:l,bindings:e,input:n}),s.parents=l,s.comments=i)}catch(e){console.error(e)}return function(){s.dropped=!0}}},[s.bindings,s.input]);let d={background:"var(--ifm-color-emphasis-100)",borderRadius:"var(--ifm-global-radius)",fontFamily:"var(--ifm-font-family-monospace)",lineHeight:1,...t};return(0,i.jsx)(c(),{value:s.input,highlight:e=>e,padding:r,style:d,onValueChange:function(e){o(n=>n.input===e&&n.parents?n:{...n,input:e})}})}let p={HORIZ_PARENT:1,HORIZ_ANCESTOR:2,VERT_PARENT:4,VERT_ANCESTOR:8,LEFT_FORK_PARENT:16,LEFT_FORK_ANCESTOR:32,RIGHT_FORK_PARENT:64,RIGHT_FORK_ANCESTOR:128,LEFT_MERGE_PARENT:256,LEFT_MERGE_ANCESTOR:512,RIGHT_MERGE_PARENT:1024,RIGHT_MERGE_ANCESTOR:2048};function x(){return(0,i.jsx)("div",{})}function f(e){let{dag:n,subset:t,style:r,circleRadius:a=16,padLineHeight:s=4,linkLineHeight:l=10,columnWidth:o=14,padding:c=4,bypassSize:d=4,dashArray:h="4,2",rotate:u=!0,drawExtra:g}=e,m=[],f=[],j=[],w=new Map,v=(e,n)=>u?`${-n} ${-e}`:`${e} ${n}`,R=(e,n)=>u?[-n,-e]:[e,n],E=a,T=0,y=0,b=0,A=0,D=c,$=c;function _(e,n){e>y&&(y=e+c),e<A&&(A=e-c),n>T&&(T=n+c),n<b&&(b=n+c)}function k(){_(D+=2*o,$)}function N(){_(D,$),$+=2*E}function C(e,n,t,r,a){let[s,l]=R(D+(e+1)*o,$+(n+1)*E),[c,d]=R(D+(t+1)*o,$+(r+1)*E),u=`${D}.${$}.${e}.${n}.${t}.${r}`,g="";if(l===d||s===c)g=`M ${s} ${l} L ${c} ${d}`;else{let[e,n]=R(D+o,$+E);g=`M ${s} ${l} Q ${e} ${n}, ${c} ${d}`}f.push((0,i.jsx)("path",{d:g,strokeDasharray:a?h:null},u))}function O(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,t=e.some(e=>"Ancestor"==e);for(let r of(E=n?a:t?l:s,D=c,e)){switch(r){case"Ancestor":C(0,-1,0,1,!0);break;case"Parent":C(0,-1,0,1);break;case"Node":!function(e){let[n,t]=R(D+o,$+E);m.push((0,i.jsx)("circle",{cx:n,cy:t,r:a},e)),j.push((0,i.jsx)("text",{x:n,y:t,textAnchor:"middle",alignmentBaseline:"middle",children:e},e)),w.set(e,{cx:n,cy:t,name:e})}(n)}k()}N()}if(!n)return x();let S=null;if(t)try{S=n.renderSubset(t)}catch{S=n.render()}else S=n.render();for(let e of S)O(e.node_line,e.glyph),e.link_line&&!function(e){for(let t of(E=l,D=c,e)){let{bits:e}=t;function n(n,t,r){let a=(e&(n|t))!=0,i=(e&t)!=0;a&&r(i)}n(p.HORIZ_PARENT,p.HORIZ_ANCESTOR,e=>{C(-1,0,1,0,e)}),n(p.LEFT_MERGE_PARENT,p.LEFT_MERGE_ANCESTOR,e=>{C(-1,0,0,-1,e)}),n(p.RIGHT_MERGE_PARENT,p.RIGHT_MERGE_ANCESTOR,e=>{C(1,0,0,-1,e)}),n(p.LEFT_FORK_PARENT,p.LEFT_FORK_ANCESTOR,e=>{C(-1,0,0,1,e)}),n(p.RIGHT_FORK_PARENT,p.RIGHT_FORK_ANCESTOR,e=>{C(1,0,0,1,e)}),n(p.VERT_PARENT,p.VERT_ANCESTOR,n=>{if(e&(p.HORIZ_PARENT|p.HORIZ_ANCESTOR)){var t;t=n,f.push((0,i.jsx)("path",{d:`M ${v(D+o,$)} l ${v(0,E-d)} q ${v(d,d)}, ${v(0,2*d)} l ${v(0,E-d)}`,strokeDasharray:t?h:null},`b${D}.${$}`))}else C(0,-1,0,1,n)}),k()}N()}(e.link_line),O(e.pad_lines);let F=null;g&&(F=g({circles:w,r:a,updateViewbox:(e,n)=>{let[t,r]=R(e,n);_(t,r)}}));let{viewBox:I,height:M,width:B}=function(){let[e,n]=R(A,b),[t,r]=R(y,T),a=Math.min(e,t),i=Math.min(n,r),s=Math.abs(t-e),l=Math.abs(r-n);return{height:l,viewBox:`${a} ${i} ${s} ${l}`,width:s}}();if(0===B||0===M)return x();let G={alignItems:"center",justifyContent:"center",width:"100%",display:"flex",...r};return(0,i.jsx)("div",{className:"svgdag",style:G,children:(0,i.jsxs)("svg",{viewBox:I,width:Math.abs(B),children:[(0,i.jsx)("g",{stroke:"var(--ifm-color-primary-darkest)",fill:"none",strokeWidth:2,children:f}),(0,i.jsx)("g",{stroke:"var(--ifm-color-primary-darkest)",fill:"var(--ifm-color-primary)",strokeWidth:2,children:m}),(0,i.jsx)("g",{stroke:"none",fill:"var(--ifm-color-content-inverse)",children:j}),F]})})}function j(e){let{initValue:n,showParents:t=!1}=e,[r,a]=l.useState(()=>({parents:new Map,dag:null,subset:null}));return(0,i.jsxs)("div",{className:"drawdag row",style:{display:"flex",alignItems:"center",justifyContent:"center"},children:[(0,i.jsx)("div",{className:"col col--6",children:(0,i.jsx)(m,{initValue:n,onDagParentsChange:function(e){let{input:n,parents:t,bindings:r}=e;a(e=>{let{dag:a,subset:i}=e,s=new r.JsDag;try{s.addHeads(t,[]),a=s,i=function(e){let{input:n,parents:t,dag:r,bindings:a}=e,i=null,s=n.match(/# order: (.*)/);if(s){let e=s[1].split(" ");i=new a.JsSet(e)}else if(t.size>10){let e=[...t.keys()].filter(e=>n.indexOf(e)>=0);for(i=r.sort(new a.JsSet(e));10>i.count();){let e=i.count();if(e===(i=i.union(r.parents(i)).union(r.children(r.heads(i)))).count())break}}return i}({input:n,dag:a,parents:t,bindings:r})}catch(e){console.error(e)}return{...e,dag:a,parents:t,subset:i}})}})}),(0,i.jsx)("div",{className:"col col--6",style:{padding:"var(--ifm-alert-padding-vertical) var(--ifm-alert-padding-horizontal)"},children:(0,i.jsx)(f,{dag:r.dag,subset:r.subset,drawExtra:function(e){let{dag:n}=e;return t&&n?function(e){let{circles:t,r,updateViewbox:a,xyt:s}=e,l=[];for(let[e,{cx:s,cy:o}]of t){let c=n.parentNames(e);if(c.length>1||c.some(e=>(t.get(e)??{}).cy!==o)){let n=c.length>1?"parents":"parent",t=`${n}: ${c.join(", ")}`,d=o+r+2;l.push((0,i.jsx)("text",{x:s,y:d,textAnchor:"middle",alignmentBaseline:"hanging",fontSize:"0.7em",children:t},e)),a(s-50,d+10),a(s+50,d+10)}}return(0,i.jsx)("g",{fill:"var(--ifm-color-content)",children:l})}:null}(r),columnWidth:t?22:14})})]})}let w={},v="DrawDag",R={},E=[{value:"Background",id:"background",level:2},{value:"DrawDag language",id:"drawdag-language",level:2},{value:"Basic",id:"basic",level:3},{value:"Name at multiple locations",id:"name-at-multiple-locations",level:3},{value:"Range generation",id:"range-generation",level:3},{value:"Vertical layout",id:"vertical-layout",level:3},{value:"Try DrawDag",id:"try-drawdag",level:3},{value:"DrawDag in tests",id:"drawdag-in-tests",level:2},{value:"<code>.t</code> integration tests",id:"t-integration-tests",level:3},{value:"Rust unit tests",id:"rust-unit-tests",level:3}];function T(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"drawdag",children:"DrawDag"})}),"\n",(0,i.jsx)(n.p,{children:"DrawDag provides an intuitive way to create commit graph for tests."}),"\n",(0,i.jsx)(n.h2,{id:"background",children:"Background"}),"\n",(0,i.jsx)(n.p,{children:"When creating tests, we often need to create a repo with a particular layout.\nFor example, to create a linear graph with three commits, we could use the\nfollowing sequence of commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl commit -m A\n$ sl commit -m B\n$ sl commit -m C\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the graph is nonlinear, extra commands such as merge and goto are needed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl commit -m A\n$ sl commit -m B\n$ sl goto -q '.^'\n$ sl commit -m C\n$ sl merge -q 'desc(B)'\n$ sl commit -m D\n"})}),"\n",(0,i.jsx)(n.p,{children:"As you can see, creating the desired graph shape via writing out a sequence of\ncommands is tedious, potentially error prone, and not immediately obvious what\nthe resulting graph looks like."}),"\n",(0,i.jsx)(n.p,{children:"To help aid people in writing tests (and those reviewing the tests!), we've\ncreated DrawDag to simply and intuitively create repos with the desired shape."}),"\n",(0,i.jsx)(n.h2,{id:"drawdag-language",children:"DrawDag language"}),"\n",(0,i.jsx)(n.p,{children:"DrawDag is a domain specific language to describe a DAG (Directed Acyclic Graph)."}),"\n",(0,i.jsx)(n.h3,{id:"basic",children:"Basic"}),"\n",(0,i.jsx)(n.p,{children:"In this example, the DrawDag code looks like a hexagon and generates the graph\nto the right:"}),"\n",(0,i.jsx)(j,{showParents:!0,initValue:String.raw`
  -B-
 /   \
A--C--D
 \   /
  E-F
`}),"\n",(0,i.jsx)(n.p,{children:"The DrawDag code forms a 2D matrix of characters. There are three types of\ncharacters:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Space characters."}),"\n",(0,i.jsxs)(n.li,{children:["Connect characters: ",(0,i.jsx)(n.code,{children:"-"}),",  ",(0,i.jsx)(n.code,{children:"\\"}),", and ",(0,i.jsx)(n.code,{children:"/"}),"."]}),"\n",(0,i.jsx)(n.li,{children:"Name characters: alpha, numeric, and some other characters."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Names define vertices in the graph. Connect characters define edges in the graph."}),"\n",(0,i.jsx)(n.p,{children:"If two vertices are directly connected, the one to the left becomes a parent of\nthe other vertex. For a commit graph, this behaves like making commits from\nleft to right."}),"\n",(0,i.jsx)(n.p,{children:"If a vertex has multiple parents, those parents are sorted in lexicographical\norder."}),"\n",(0,i.jsx)(n.h3,{id:"name-at-multiple-locations",children:"Name at multiple locations"}),"\n",(0,i.jsx)(n.p,{children:"A single name can be used in multiple locations and will represent the same\nvertex in the graph."}),"\n",(0,i.jsxs)(n.p,{children:["For example, the code below uses ",(0,i.jsx)(n.code,{children:"C"})," in two locations to create criss-cross\nmerges."]}),"\n",(0,i.jsx)(j,{initValue:String.raw`
A-C
 \
B-D
 \
  C
`}),"\n",(0,i.jsx)(n.h3,{id:"range-generation",children:"Range generation"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:".."})," (or more dots) to generate a range of vertices and connect\nthem. This works for simple alphabet names like ",(0,i.jsx)(n.code,{children:"A..Z"})," or numbers like\n",(0,i.jsx)(n.code,{children:"A01..A99"}),":"]}),"\n",(0,i.jsx)(j,{initValue:String.raw`
A..C...F
    \ /
     K
`}),"\n",(0,i.jsxs)(n.p,{children:["The range expansion under the hood works similarly to\n",(0,i.jsx)(n.a,{href:"https://www.ruby-lang.org/",children:"Ruby"}),"'s ",(0,i.jsx)(n.a,{href:"https://ruby-doc.org/core/Range.html",children:"Range"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"vertical-layout",children:"Vertical layout"}),"\n",(0,i.jsxs)(n.p,{children:["By default, DrawDag assumes a horizontal layout. You can opt-in the alternative\nvertical layout by using ",(0,i.jsx)(n.code,{children:"|"}),", or ",(0,i.jsx)(n.code,{children:":"}),". It has a few differences:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"|"})," is a valid connect character. ",(0,i.jsx)(n.code,{children:"-"})," becomes invalid."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:":"})," is used for range generation. ",(0,i.jsx)(n.code,{children:"."})," becomes a valid name character."]}),"\n"]}),"\n",(0,i.jsx)(j,{initValue:String.raw`
Z
:\
C B
|/
A
`}),"\n",(0,i.jsxs)(n.p,{children:["Commits are created from bottom to top. This is similar to ",(0,i.jsx)(n.code,{children:"sl log -G"})," output\norder."]}),"\n",(0,i.jsx)(n.h3,{id:"try-drawdag",children:"Try DrawDag"}),"\n",(0,i.jsx)(n.p,{children:"Try editing the DrawDag code above. We draw the output live in the browser."}),"\n",(0,i.jsx)(n.h2,{id:"drawdag-in-tests",children:"DrawDag in tests"}),"\n",(0,i.jsxs)(n.h3,{id:"t-integration-tests",children:[(0,i.jsx)(n.code,{children:".t"})," integration tests"]}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"drawdag"})," shell function in ",(0,i.jsx)(n.code,{children:".t"})," tests to create commits and\nchange the repo."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sl-shell-example",children:"$ drawdag << 'EOS'\n>  C\n>  |\n> B1 B2  # amend: B1 -> B2\n>   \\|\n>    A\n> EOS\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"#"})," starts a comment till the end of the line. Comments won't be parsed as\nDrawDag code but might have other meanings:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"# A/dir/file = 1"}),": In commit ",(0,i.jsx)(n.code,{children:"A"}),", update path ",(0,i.jsx)(n.code,{children:"dir/file"})," to content ",(0,i.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"# amend: X -> Y -> Z"}),": Mark ",(0,i.jsx)(n.code,{children:"Y"})," as amended from ",(0,i.jsx)(n.code,{children:"X"}),", ",(0,i.jsx)(n.code,{children:"Z"})," as amended from ",(0,i.jsx)(n.code,{children:"Y"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"# bookmark FOO = A"}),": Create bookmark ",(0,i.jsx)(n.code,{children:"FOO"})," that points to commit ",(0,i.jsx)(n.code,{children:"A"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["You can also use revset expressions to refer to existing commits. For example,\n",(0,i.jsx)(n.code,{children:"."})," in vertical layout refers to the working parent."]}),"\n",(0,i.jsxs)(n.p,{children:["Check ",(0,i.jsx)(n.code,{children:"test-drawdag.t"})," for more examples."]}),"\n",(0,i.jsx)(n.h3,{id:"rust-unit-tests",children:"Rust unit tests"}),"\n",(0,i.jsxs)(n.p,{children:["You can use the ",(0,i.jsx)(n.code,{children:"drawdag"})," crate to parse DrawDag code into graph vertices and\nedges."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"dag"})," crate might also be useful to run complex queries on a graph, and\nrender it as ASCII."]})]})}function y(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(T,{...e})}):T(e)}},18925:function(){}}]);