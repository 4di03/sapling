"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8618],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>d,MDXProvider:()=>c,mdx:()=>f,useMDXComponents:()=>p,withMDXComponents:()=>m});var i=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},a.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=i.createContext({}),m=function(e){return function(n){var t=p(n.components);return i.createElement(e,a({},n,{components:t}))}},p=function(e){var n=i.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return i.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,o=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(t),c=r,h=m["".concat(o,".").concat(c)]||m[c]||u[c]||a;return t?i.createElement(h,s(s({ref:n},d),{},{components:t})):i.createElement(h,s({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var d=2;d<a;d++)o[d]=t[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},21271:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>d});var i=t(83117),r=(t(67294),t(3905));const a={},o="Internal differences from Mercurial",s={unversionedId:"dev/internals/internal-difference-hg",id:"dev/internals/internal-difference-hg",title:"Internal differences from Mercurial",description:"This page assumes that you are familiar with Mercurial internals.",source:"@site/docs/dev/internals/internal-difference-hg.md",sourceDirName:"dev/internals",slug:"/dev/internals/internal-difference-hg",permalink:"/docs/dev/internals/internal-difference-hg",draft:!1,editUrl:"https://github.com/facebookexperimental/eden/tree/main/website/docs/dev/internals/internal-difference-hg.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"IndexedLog",permalink:"/docs/dev/internals/indexedlog"},next:{title:"LineLog",permalink:"/docs/dev/internals/linelog"}},l={},d=[{value:"Visibility",id:"visibility",level:2},{value:"Phase",id:"phase",level:2},{value:"Obsolescence",id:"obsolescence",level:2},{value:"Storage format",id:"storage-format",level:2},{value:"Protocols",id:"protocols",level:2},{value:"Python 3 and Unicode",id:"python-3-and-unicode",level:2},{value:"Pure Python support",id:"pure-python-support",level:2},{value:"Ignore files",id:"ignore-files",level:2},{value:"Git support",id:"git-support",level:2}],m={toc:d};function p(e){let{components:n,...t}=e;return(0,r.mdx)("wrapper",(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("h1",{id:"internal-differences-from-mercurial"},"Internal differences from Mercurial"),(0,r.mdx)("admonition",{type:"note"},(0,r.mdx)("p",{parentName:"admonition"},"This page assumes that you are familiar with Mercurial internals.")),(0,r.mdx)("h2",{id:"visibility"},"Visibility"),(0,r.mdx)("p",null,"Mercurial treats all commits as visible by default, using obsolescence data to\nmark obsoleted commits as invisible."),(0,r.mdx)("p",null,"Sapling treats all commits as invisible by default, using ",(0,r.mdx)("a",{parentName:"p",href:"./visibility-and-mutation#commit-visibility"},'"visible\nheads"'),"\nand bookmark references to mark commits and their ancestors as visible. This\nis similar to Git."),(0,r.mdx)("p",null,"Performance wise, too much obsolescence data can slow down a Mercurial repo.\nSimilarly, too many bookmarks and visible heads can slow down a Sapling repo.\nHowever, obsolescence data can grow over time unbounded while bookmarks and\nvisible heads can shrink using commands like ",(0,r.mdx)("inlineCode",{parentName:"p"},"sl bookmark -d")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"sl hide"),".\nPractically, we assume a bounded number of bookmarks and visible heads."),(0,r.mdx)("p",null,'Mercurial has a "repo view" layer to forbid access to hidden commits.\nAccessing them (for example, using the ',(0,r.mdx)("inlineCode",{parentName:"p"},"predecessors()")," revset) requires a\nglobal flag ",(0,r.mdx)("inlineCode",{parentName:"p"},"--hidden"),'. Sapling removes the "repo view" layer. Revsets like\n',(0,r.mdx)("inlineCode",{parentName:"p"},"all()"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"children()"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"descendants()")," handle the visibility transparently by\nnot including invisible commits. Revsets like ",(0,r.mdx)("inlineCode",{parentName:"p"},"predecessors()")," do not care\nabout visibility and return invisible commits.  If the user explicitly requests\nthem using commit hashes, they will be included."),(0,r.mdx)("h2",{id:"phase"},"Phase"),(0,r.mdx)("p",null,'Mercurial tracks phases (public, draft, secret) explicitly using "phase roots".\nCommits are public by default. Draft and secret roots are explicitly listed.\nThe "phase roots" can grow unbounded and slow down the repo over time.'),(0,r.mdx)("p",null,"Sapling infers phases from remote bookmarks and visibility. Commits are secret\n(invisible) by default. Main remote bookmarks and their ancestors are marked\npublic. Other visible commits are draft."),(0,r.mdx)("p",null,'In Mercurial visibility and phase are separate concepts. A secret commit can be\nvisible or invisible. In Sapling "secret" is just an alias to "invisible" -\nthere are no "visible secret" commits.'),(0,r.mdx)("h2",{id:"obsolescence"},"Obsolescence"),(0,r.mdx)("p",null,'Mercurial uses the "obsstore" to track commit rewrites. Sapling uses\n',(0,r.mdx)("a",{parentName:"p",href:"./visibility-and-mutation#commit-mutation"},'"mutation"'),". Their differences are:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Obsstore decides visibility. Mutation does not decide visibility."),(0,r.mdx)("li",{parentName:"ul"},'Obsstore supports "prune" operation to remove a commit without a successor\ncommit. Mutation requires at least one successor commit so it cannot track\n"prune" rewrites.'),(0,r.mdx)("li",{parentName:"ul"},"If all successors of a mutation are invisible, then the mutation is ignored.\nThis means mutation can be implicitly tracked by visibility. Restoring\nvisibility to a previous state during an undo operation effectively\nrestores the commit rewrite state.")),(0,r.mdx)("p",null,"Implementation wise, mutation uses IndexedLog for ",(0,r.mdx)("inlineCode",{parentName:"p"},"O(log N)")," lookup. Nothing in\nSapling requires ",(0,r.mdx)("inlineCode",{parentName:"p"},"O(N)")," loading of the entire mutation data."),(0,r.mdx)("h2",{id:"storage-format"},"Storage format"),(0,r.mdx)("p",null,"Mercurial uses ",(0,r.mdx)("a",{parentName:"p",href:"https://www.mercurial-scm.org/wiki/Revlog"},"Revlog")," as its main\nfile format. Sapling uses ",(0,r.mdx)("a",{parentName:"p",href:"./indexedlog"},"IndexedLog")," instead."),(0,r.mdx)("p",null,"For working copy state, Mercurial uses ",(0,r.mdx)("a",{parentName:"p",href:"https://www.mercurial-scm.org/wiki/DirState"},"Dirstate"),".\nSapling switched to TreeState in 2017. Mercurial 5.9 released in 2021\nintroduced ",(0,r.mdx)("a",{parentName:"p",href:"https://www.mercurial-scm.org/repo/hg/file/tip/mercurial/helptext/internals/dirstate-v2.txt"},"Dirstate v2"),"\nthat improves performance in a similar way."),(0,r.mdx)("p",null,"For repo references such as bookmarks and remote bookmarks, Mercurial tracks\nthem in individual files like ",(0,r.mdx)("inlineCode",{parentName:"p"},".hg/bookmarks"),". Sapling uses ",(0,r.mdx)("a",{parentName:"p",href:"./metalog"},"MetaLog"),"\nto track them so changes are across state files are atomic."),(0,r.mdx)("h2",{id:"protocols"},"Protocols"),(0,r.mdx)("p",null,"Mercurial supports ssh and http wireprotocols. Sapling's main protocol is\ndefined in a Rust ",(0,r.mdx)("inlineCode",{parentName:"p"},"EdenApi")," trait. It is very different from the original\nwireprotocols."),(0,r.mdx)("p",null,"There are two implementations of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"EdenApi")," trait: an HTTP client that talks\nto a supported server and an ",(0,r.mdx)("inlineCode",{parentName:"p"},"EagerRepo")," for lightweight local testing. The\nHTTP implementation uses multiple connections to saturate network bandwidth\nfor better performance."),(0,r.mdx)("h2",{id:"python-3-and-unicode"},"Python 3 and Unicode"),(0,r.mdx)("p",null,"Python 3 switched the ",(0,r.mdx)("inlineCode",{parentName:"p"},"str")," type from ",(0,r.mdx)("inlineCode",{parentName:"p"},"bytes")," to ",(0,r.mdx)("inlineCode",{parentName:"p"},"unicode"),". This affects\nkeyword arguments, and stdlib APIs like ",(0,r.mdx)("inlineCode",{parentName:"p"},"os.listdir"),", ",(0,r.mdx)("inlineCode",{parentName:"p"},"sys.argv"),"."),(0,r.mdx)("p",null,"Sapling adopts Unicode more aggressively. Command line arguments, bookmark\nnames, file names, config files are considered Unicode and are encoded using\nutf-8 during serialization. Sapling does not turn Python keyword arguments and\nstdlib output back to bytes."),(0,r.mdx)("p",null,"Treating file names as utf-8 allows Sapling to read and write correct file\nnames between Windows and ","*","nix systems for a given repo."),(0,r.mdx)("h2",{id:"pure-python-support"},"Pure Python support"),(0,r.mdx)("p",null,"Mercurial maintains a pure Python implementation. It can run without building\nwith a C or Rust compiler by setting ",(0,r.mdx)("inlineCode",{parentName:"p"},"HGMODULEPOLICY")," to ",(0,r.mdx)("inlineCode",{parentName:"p"},"py"),". This is not\npossible for Sapling."),(0,r.mdx)("h2",{id:"ignore-files"},"Ignore files"),(0,r.mdx)("p",null,"Mercurial supports ",(0,r.mdx)("inlineCode",{parentName:"p"},".hgignore"),", optionally ",(0,r.mdx)("inlineCode",{parentName:"p"},".gitignore")," through extensions.\nSapling only supports ",(0,r.mdx)("inlineCode",{parentName:"p"},".gitignore"),"."),(0,r.mdx)("h2",{id:"git-support"},"Git support"),(0,r.mdx)("p",null,"There are 2 extensions that add Git support to Mercurial:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://www.mercurial-scm.org/wiki/HgGit"},"hg-git")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("a",{parentName:"li",href:"https://www.mercurial-scm.org/repo/hg/file/tip/hgext/git/__init__.py"},"hgext/git"))),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"hg-git")," mirrors the bare Git repo to a regular hg repo. Therefore\nit double stores file content, and produces different hashes."),(0,r.mdx)("p",null,(0,r.mdx)("inlineCode",{parentName:"p"},"hgext/git")," tries to be compatible with an existing Git repo. Therefore\nit is limited to git specifications like what the ",(0,r.mdx)("inlineCode",{parentName:"p"},".git")," directory should\ncontain and in what format."),(0,r.mdx)("p",null,"Sapling treats Git as an implementation of its repo data abstraction.\nThis means:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The working copy implementation is Sapling's. It can integrate with our\nvirtualized working copy filesystem in the future."),(0,r.mdx)("li",{parentName:"ul"},"The repo data implementation can adopt Sapling's components in the future for\nbenefits like on-demand fetching, data bookkeeping without repack."),(0,r.mdx)("li",{parentName:"ul"},"Git commands are not supported in Sapling's Git repo.")))}p.isMDXComponent=!0}}]);