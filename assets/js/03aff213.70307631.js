"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7782],{3905:(e,n,t)=>{t.r(n),t.d(n,{MDXContext:()=>s,MDXProvider:()=>u,mdx:()=>h,useMDXComponents:()=>l,withMDXComponents:()=>c});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function m(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){return function(n){var t=l(n.components);return r.createElement(e,a({},n,{components:t}))}},l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):m(m({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),c=l(t),u=o,f=c["".concat(i,".").concat(u)]||c[u]||p[u]||a;return t?r.createElement(f,m(m({ref:n},s),{},{components:t})):r.createElement(f,m({ref:n},s))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var m={};for(var d in n)hasOwnProperty.call(n,d)&&(m[d]=n[d]);m.originalType=e,m.mdxType="string"==typeof e?e:o,i[1]=m;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},35121:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>m,toc:()=>s});var r=t(83117),o=(t(67294),t(3905));const a={sidebar_position:42},i=void 0,m={unversionedId:"commands/unamend",id:"commands/unamend",title:"unamend",description:"unamend | una",source:"@site/docs/commands/unamend.md",sourceDirName:"commands",slug:"/commands/unamend",permalink:"/docs/commands/unamend",draft:!1,editUrl:"https://github.com/facebook/sapling/tree/main/website/docs/commands/unamend.md",tags:[],version:"current",sidebarPosition:42,frontMatter:{sidebar_position:42},sidebar:"tutorialSidebar",previous:{title:"status",permalink:"/docs/commands/status"},next:{title:"uncommit",permalink:"/docs/commands/uncommit"}},d={},s=[{value:"unamend | una",id:"unamend--una",level:2}],c={toc:s};function l(e){let{components:n,...t}=e;return(0,o.mdx)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.mdx)("h2",{id:"unamend--una"},"unamend | una"),(0,o.mdx)("p",null,(0,o.mdx)("strong",{parentName:"p"},"undo the last amend operation on the current commit")),(0,o.mdx)("p",null,"Reverse the effects of an ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl amend")," operation. Hides the current commit\nand checks out the previous version of the commit. ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl unamend")," does not\nrevert the state of the working copy, so changes that were added to the\ncommit in the last amend operation become pending changes in the working\ncopy."),(0,o.mdx)("p",null,(0,o.mdx)("inlineCode",{parentName:"p"},"sl unamend")," cannot be run on amended commits that have children. In\nother words, you cannot unamend an amended commit in the middle of a\nstack."),(0,o.mdx)("p",null,"Running ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl unamend")," is similar to running ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl undo --keep"),"\nimmediately after ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl amend"),". However, unlike ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl undo"),", which can\nonly undo an amend if it was the last operation you performed,\n",(0,o.mdx)("inlineCode",{parentName:"p"},"sl unamend")," can unamend any draft amended commit in the graph that\ndoes not have children."),(0,o.mdx)("p",null,"Although ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl unamend")," is typically used to reverse the effects of\n",(0,o.mdx)("inlineCode",{parentName:"p"},"sl amend"),", it actually rolls back the current commit to its previous\nversion, regardless of whether the changes resulted from an ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl amend"),"\noperation or from another operation, such as ",(0,o.mdx)("inlineCode",{parentName:"p"},"sl rebase"),"."))}l.isMDXComponent=!0}}]);