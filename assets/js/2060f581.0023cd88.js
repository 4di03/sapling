"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["6734"],{4406:function(e,n,s){s.r(n),s.d(n,{metadata:()=>o,contentTitle:()=>d,default:()=>u,assets:()=>r,toc:()=>c,frontMatter:()=>l});var o=JSON.parse('{"id":"git/submodule","title":"Submodule","description":"This page is about using the .sl mode. Submodule support for the .git mode is WIP.","source":"@site/docs/git/submodule.md","sourceDirName":"git","slug":"/git/submodule","permalink":"/docs/git/submodule","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/git/submodule.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Sapling stack","permalink":"/docs/git/sapling-stack"},"next":{"title":"Commands","permalink":"/docs/category/commands"}}'),i=s("85893"),t=s("50065");let l={},d="Submodule",r={},c=[{value:"Concepts",id:"concepts",level:2},{value:"Git submodule",id:"git-submodule",level:3},{value:"Submodule as a single file",id:"submodule-as-a-single-file",level:3},{value:"Submodule as a repository",id:"submodule-as-a-repository",level:3},{value:"Common operations",id:"common-operations",level:2},{value:"Clone a repository with submodules",id:"clone-a-repository-with-submodules",level:3},{value:"Use a different commit in a submodule",id:"use-a-different-commit-in-a-submodule",level:3},{value:"Show changed files in a submodule",id:"show-changed-files-in-a-submodule",level:3},{value:"Pull submodule changes",id:"pull-submodule-changes",level:3},{value:"Push submodule changes",id:"push-submodule-changes",level:3},{value:"Add, remove, or rename a submodule",id:"add-remove-or-rename-a-submodule",level:3}];function a(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",section:"section",sup:"sup",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"submodule",children:"Submodule"})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["This page is about using the ",(0,i.jsxs)(n.a,{href:"git_support_modes#sl-mode",children:[(0,i.jsx)(n.code,{children:".sl"})," mode"]}),". Submodule support for the ",(0,i.jsxs)(n.a,{href:"git_support_modes#git-mode",children:[(0,i.jsx)(n.code,{children:".git"})," mode"]})," is WIP."]})}),"\n",(0,i.jsx)(n.p,{children:"Sapling has basic support for Git submodules."}),"\n",(0,i.jsxs)(n.p,{children:["Sapling does not have a ",(0,i.jsx)(n.code,{children:"submodule"})," command. Commands that change the working\ncopy like ",(0,i.jsx)(n.code,{children:"goto"})," or ",(0,i.jsx)(n.code,{children:"clone"})," will recursively change submodules. Other commands\nlike ",(0,i.jsx)(n.code,{children:"commit"}),", ",(0,i.jsx)(n.code,{children:"pull"}),", ",(0,i.jsx)(n.code,{children:"status"}),", ",(0,i.jsx)(n.code,{children:"diff"})," will treat a submodule as a special\nfile that only contains a commit hash. Those commands ignore files inside\nsubmodules."]}),"\n",(0,i.jsx)(n.h2,{id:"concepts",children:"Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"git-submodule",children:"Git submodule"}),"\n",(0,i.jsx)(n.p,{children:"A Git submodule has three basic properties: URL (where to fetch the submodule),\npath (where to write to), and commit hash (which commit to use)."}),"\n",(0,i.jsxs)(n.p,{children:["The URL and path are specified in the check-in file ",(0,i.jsx)(n.code,{children:".gitmodules"}),". The commit\nhash is stored specially at the given path."]}),"\n",(0,i.jsx)(n.p,{children:"Depending on operations, a submodule might behave like a file or a repository."}),"\n",(0,i.jsx)(n.h3,{id:"submodule-as-a-single-file",children:"Submodule as a single file"}),"\n",(0,i.jsxs)(n.p,{children:["When you run ",(0,i.jsx)(n.code,{children:"diff"}),", ",(0,i.jsx)(n.code,{children:"cat"}),", ",(0,i.jsx)(n.code,{children:"status"})," or commands that directly or indirectly\nask for the content of a submodule, the submodule behaves like a single file\nwith the content ",(0,i.jsx)(n.code,{children:"Subproject commit HASH"}),", it will not behave like a directory."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, ",(0,i.jsx)(n.code,{children:"status"})," and ",(0,i.jsx)(n.code,{children:"diff"})," only shows the commit hash change of\nsubmodules. They do not show individual file changes inside the submodules.\n",(0,i.jsx)(n.code,{children:"sl cat"})," treats file paths inside submodules as non existent."]}),"\n",(0,i.jsxs)(n.p,{children:["When you run ",(0,i.jsx)(n.code,{children:"commit"}),", a submodule is also treated as a single file with just\nits commit hash. ",(0,i.jsx)(n.code,{children:"commit"})," will not recursively make commits in submodules.\nSame for ",(0,i.jsx)(n.code,{children:"amend"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"submodule-as-a-repository",children:"Submodule as a repository"}),"\n",(0,i.jsxs)(n.p,{children:["When you run ",(0,i.jsx)(n.code,{children:"goto"}),", ",(0,i.jsx)(n.code,{children:"revert"})," or commands that ask Sapling to change the\nworking copy to match the content of a submodule, Sapling will pull the\nsubmodule on demand, create the submodule repository on demand, and ask the\nsubmodule repository to checkout the specified commit."]}),"\n",(0,i.jsxs)(n.p,{children:["When you use ",(0,i.jsx)(n.code,{children:"cd"})," to enter a submodule, the submodule works like a standalone\nrepository."]}),"\n",(0,i.jsx)(n.h2,{id:"common-operations",children:"Common operations"}),"\n",(0,i.jsx)(n.h3,{id:"clone-a-repository-with-submodules",children:"Clone a repository with submodules"}),"\n",(0,i.jsxs)(n.p,{children:["Sapling clones submodules recursively ",(0,i.jsx)(n.sup,{children:(0,i.jsx)(n.a,{href:"#user-content-fn-1",id:"user-content-fnref-1","data-footnote-ref":!0,"aria-describedby":"footnote-label",children:"1"})}),"; there is no need to use flags like\n",(0,i.jsx)(n.code,{children:"--recurse"}),", or use additional commands to initialize the submodules."]}),"\n",(0,i.jsx)(n.h3,{id:"use-a-different-commit-in-a-submodule",children:"Use a different commit in a submodule"}),"\n",(0,i.jsxs)(n.p,{children:["Imagine you have a submodule at ",(0,i.jsx)(n.code,{children:"third_party/fmt"}),". The submodule is currently\nat commit ",(0,i.jsx)(n.code,{children:"a337011"}),", and you want to use commit ",(0,i.jsx)(n.code,{children:"1f575fd"})," instead. You can make\nsuch change by running ",(0,i.jsx)(n.code,{children:"sl goto"})," in the submodule:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cd third_party/fmt\n$ sl goto 1f575fd\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Now the parent repo will notice the change. ",(0,i.jsx)(n.code,{children:"sl status"})," will show\n",(0,i.jsx)(n.code,{children:"third_party/fmt"}),' as "modified":']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cd ../..\n$ sl status\nM third_party/fmt\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can run ",(0,i.jsx)(n.code,{children:"sl diff"})," to double check the commit hash change is from\n",(0,i.jsx)(n.code,{children:"a337011"})," to ",(0,i.jsx)(n.code,{children:"1f575fd"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ sl diff\ndiff --git a/third_party/fmt b/third_party/fmt\n--- a/third_party/fmt\n+++ b/third_party/fmt\n@@ -1,1 +1,1 @@\n-Subproject commit a33701196adfad74917046096bf5a2aa0ab0bb50\n+Subproject commit 1f575fd5c90278bcf723f72737f0f63c1951bea3\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you need to abandon changes in a submodule, use ",(0,i.jsx)(n.code,{children:"revert"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ sl revert third_party/fmt\n"})}),"\n",(0,i.jsx)(n.p,{children:"Finally, remember to commit the submodule change:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'$ sl commit -m "Update third_party/fmt to 1f575fd"\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note ",(0,i.jsx)(n.code,{children:"commit"})," only makes a single commit in the parent repo. It does not\nrecursively make commits in submodules. This is because the parent repo only\ntracks the commit hashes of submodules and does not directly care about\nchanged files in submodules."]}),"\n",(0,i.jsx)(n.h3,{id:"show-changed-files-in-a-submodule",children:"Show changed files in a submodule"}),"\n",(0,i.jsxs)(n.p,{children:["You can use ",(0,i.jsx)(n.code,{children:"sl status"})," within a submodule to list changed files in that\nsubmodule:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cd third_party/fmt\n$ sl status\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Running ",(0,i.jsx)(n.code,{children:"sl status"})," from the parent repo will not list changed files in\nsubmodule. Although changed files are not shown, changed commits are\nalways shown. You might want to always ",(0,i.jsx)(n.code,{children:"sl commit"})," changes in submodules\nso submodule changes can be detected from the parent repo when using\n",(0,i.jsx)(n.code,{children:"sl status"})," or ",(0,i.jsx)(n.code,{children:"sl diff"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"If you do need to list changed files in all submodules, you might want to\nuse a shell script like:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"for i in `grep 'path =' .gitmodules | sed 's/.*=//'`; do sl status --pager=off --cwd $i; done\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the future we might add a convenient way to run ",(0,i.jsx)(n.code,{children:"status"})," recursively in\nsubmodules."]}),"\n",(0,i.jsx)(n.h3,{id:"pull-submodule-changes",children:"Pull submodule changes"}),"\n",(0,i.jsxs)(n.p,{children:["When you run ",(0,i.jsx)(n.code,{children:"sl goto"})," from the parent repo, Sapling will pull required\nsubmodule repos on demand in order to complete the ",(0,i.jsx)(n.code,{children:"goto"})," operation."]}),"\n",(0,i.jsxs)(n.p,{children:["Right now, Sapling might only pull the commit needed and will not pull branches\nlike ",(0,i.jsx)(n.code,{children:"main"})," or ",(0,i.jsx)(n.code,{children:"master"}),". If you want to pull branches explicitly, you can pull\nit within the submodule:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cd path/to/submodule\n$ sl pull -B main\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you run ",(0,i.jsx)(n.code,{children:"sl pull"})," from the parent repo, Sapling does not pull submodule\nrepos recursively."]}),"\n",(0,i.jsx)(n.h3,{id:"push-submodule-changes",children:"Push submodule changes"}),"\n",(0,i.jsxs)(n.p,{children:["You can push submodule changes to the remote server by running ",(0,i.jsx)(n.code,{children:"sl push"})," within\nthe submodule:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"$ cd path/to/submodule\n$ sl push --to main\n"})}),"\n",(0,i.jsxs)(n.p,{children:["If you run ",(0,i.jsx)(n.code,{children:"sl push"})," from the parent repo, Sapling does not push submodule\nrepos recursively."]}),"\n",(0,i.jsx)(n.h3,{id:"add-remove-or-rename-a-submodule",children:"Add, remove, or rename a submodule"}),"\n",(0,i.jsxs)(n.p,{children:["Right now, these are not supported. In the future we might make ",(0,i.jsx)(n.code,{children:"sl clone"}),"\ndetect the submodule use-case, and write the repo data to the right location,\nand update ",(0,i.jsx)(n.code,{children:"sl add"}),", ",(0,i.jsx)(n.code,{children:"sl mv"}),", ",(0,i.jsx)(n.code,{children:"sl rm"})," to update ",(0,i.jsx)(n.code,{children:".gitmodules"})," automatically."]}),"\n","\n",(0,i.jsxs)(n.section,{"data-footnotes":!0,className:"footnotes",children:[(0,i.jsx)(n.h2,{className:"sr-only",id:"footnote-label",children:"Footnotes"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{id:"user-content-fn-1",children:["\n",(0,i.jsxs)(n.p,{children:["Submodules are not cloned like regular repos where there is usually a\n",(0,i.jsx)(n.code,{children:"remote/main"})," branch after clone. This is because Sapling attempts to pull\nby the commit hash to complete the working copy update. To obtain\n",(0,i.jsx)(n.code,{children:"remote/main"})," in a submodule, you can run ",(0,i.jsx)(n.code,{children:"sl pull -B main"}),". ",(0,i.jsx)(n.a,{href:"#user-content-fnref-1","data-footnote-backref":"","aria-label":"Back to reference 1",className:"data-footnote-backref",children:"\u21A9"})]}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){let{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},50065:function(e,n,s){s.d(n,{Z:function(){return d},a:function(){return l}});var o=s(67294);let i={},t=o.createContext(i);function l(e){let n=o.useContext(t);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),o.createElement(t.Provider,{value:n},e.children)}}}]);