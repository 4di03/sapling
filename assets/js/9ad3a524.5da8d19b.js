"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["2613"],{55608:function(e,n,r){r.r(n),r.d(n,{metadata:()=>i,contentTitle:()=>a,default:()=>x,assets:()=>c,toc:()=>h,frontMatter:()=>o});var i=JSON.parse('{"id":"dev/internals/linelog","title":"LineLog","description":"LineLog is an implementation of interleaved deltas.","source":"@site/docs/dev/internals/linelog.md","sourceDirName":"dev/internals","slug":"/dev/internals/linelog","permalink":"/docs/dev/internals/linelog","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/dev/internals/linelog.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Internal differences from Mercurial","permalink":"/docs/dev/internals/internal-difference-hg"},"next":{"title":"MetaLog","permalink":"/docs/dev/internals/metalog"}}'),t=r("85893"),s=r("50065"),d=r("47902"),l=r("5525");let o={},a="LineLog",c={},h=[{value:"Bytecode",id:"bytecode",level:2},{value:"Interpretation",id:"interpretation",level:2},{value:"Example",id:"example",level:3},{value:"Checkout and annotate",id:"checkout-and-annotate",level:3},{value:"Range of revisions",id:"range-of-revisions",level:3},{value:"Linear history",id:"linear-history",level:3},{value:"Editing LineLog",id:"editing-linelog",level:2}];function u(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"linelog",children:"LineLog"})}),"\n",(0,t.jsxs)(n.p,{children:["LineLog is an implementation of ",(0,t.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Interleaved_deltas",children:"interleaved deltas"}),".\nIt provides conflict-free stack editing ability. It is used by the ",(0,t.jsx)(n.code,{children:"absorb"}),"\ncommand."]}),"\n",(0,t.jsx)(n.h2,{id:"bytecode",children:"Bytecode"}),"\n",(0,t.jsx)(n.p,{children:"LineLog uses a bytecode format that is interpreted to produce content.\nThere are 5 instructions:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Name"}),(0,t.jsx)(n.th,{children:"Operand 1"}),(0,t.jsx)(n.th,{children:"Operand 2"}),(0,t.jsx)(n.th,{children:"Meaning"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"JGE"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Rev"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Addr"})}),(0,t.jsxs)(n.td,{children:["Jump to ",(0,t.jsx)(n.code,{children:"Addr"})," if ",(0,t.jsx)(n.code,{children:"Current Rev"})," >= ",(0,t.jsx)(n.code,{children:"Rev"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"J"}),(0,t.jsx)(n.td,{children:"0"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Addr"})}),(0,t.jsxs)(n.td,{children:["Jump to ",(0,t.jsx)(n.code,{children:"Addr"})," unconditionally"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"JL"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Rev"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Addr"})}),(0,t.jsxs)(n.td,{children:["Jump to ",(0,t.jsx)(n.code,{children:"Addr"})," if ",(0,t.jsx)(n.code,{children:"Current Rev"})," < ",(0,t.jsx)(n.code,{children:"Rev"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"LINE"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Rev"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"Line"})}),(0,t.jsxs)(n.td,{children:["Append the ",(0,t.jsx)(n.code,{children:"Line + 1"}),"-th line in ",(0,t.jsx)(n.code,{children:"Rev"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"END"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"-"}),(0,t.jsx)(n.td,{children:"Stop execution"})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["Instructions are fixed-sized. The opcode takes 2 bits. ",(0,t.jsx)(n.code,{children:"J"})," and ",(0,t.jsx)(n.code,{children:"JGE"})," share the\nsame opcode (",(0,t.jsx)(n.code,{children:"J Addr"})," is just ",(0,t.jsx)(n.code,{children:"JGE 0 Addr"}),"). Operand 1 takes 30 bits. Operand 2\ntakes 32 bits."]}),"\n",(0,t.jsx)(n.h2,{id:"interpretation",children:"Interpretation"}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.p,{children:"It is easier to understand with an example. Given a file with 3 revisions:"}),"\n",(0,t.jsxs)("div",{className:"row",children:[(0,t.jsxs)("div",{className:"col col--4",children:[(0,t.jsx)(n.p,{children:"Rev 1"}),(0,t.jsx)("pre",{children:(0,t.jsxs)(n.p,{children:["a",(0,t.jsx)("br",{}),"\nb",(0,t.jsx)("br",{}),"\nc"]})})]}),(0,t.jsxs)("div",{className:"col col--4",children:[(0,t.jsx)(n.p,{children:"Rev 2: Inserted 2 lines."}),(0,t.jsx)("pre",{children:(0,t.jsxs)(n.p,{children:["a",(0,t.jsx)("br",{}),"\nb",(0,t.jsx)("br",{}),"\n1",(0,t.jsx)("br",{}),"\n2",(0,t.jsx)("br",{}),"\nc"]})})]}),(0,t.jsxs)("div",{className:"col col--4",children:[(0,t.jsx)(n.p,{children:"Rev 3: Deleted 2 lines."}),(0,t.jsx)("pre",{children:(0,t.jsxs)(n.p,{children:["a",(0,t.jsx)("br",{}),"\n2",(0,t.jsx)("br",{}),"\nc"]})})]})]}),"\n",(0,t.jsx)(n.p,{children:"It can be encoded in LineLog bytecode like:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Addr: Instruction\n     0: JL   1 8\n     1: LINE 1 0\n     2: JGE  3 6\n     3: LINE 1 1\n     4: JL   2 7\n     5: LINE 2 2\n     6: LINE 2 3\n     7: LINE 1 2\n     8: END\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To check out a specified revision, set ",(0,t.jsx)(n.code,{children:"Current Rev"})," to the revision to check\nout, then execute the instructions from the beginning."]}),"\n",(0,t.jsx)(n.p,{children:"Here are the steps to check out each revision:"}),"\n",(0,t.jsxs)(d.default,{children:[(0,t.jsx)(l.default,{value:"r0",label:"Rev 0",children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Address 0: JL 1 8: Jump to address 8, because Current Rev (0) < 1."}),(0,t.jsx)("li",{children:"Address 8: END: Stop execution. The content is empty."})]})}),(0,t.jsx)(l.default,{value:"r1",label:"Rev 1",default:!0,children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Address 0: JL 1 8: Do nothing, because Current Rev (1) is not < 1."}),(0,t.jsx)("li",{children:'Address 1: LINE 1 0: Append the first line from rev 1 ("a").'}),(0,t.jsx)("li",{children:"Address 2: JGE 3 6: Do nothing, because 1 is not \u2265 3."}),(0,t.jsx)("li",{children:'Address 3: LINE 1 1: Append the second line from rev 1 ("b").'}),(0,t.jsx)("li",{children:"Address 4: JL 2 7: Jump to address 7, because 1 < 2."}),(0,t.jsx)("li",{children:'Address 7: LINE 1 2: Append the third line from rev 1 ("c").'}),(0,t.jsx)("li",{children:'Address 8: END: Stop. The final content is "abc".'})]})}),(0,t.jsx)(l.default,{value:"r2",label:"Rev 2",children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Address 0: JL 1 8: Do nothing, because Current Rev (2) is not < 1."}),(0,t.jsx)("li",{children:'Address 1: LINE 1 0: Append the first line from rev 1 ("a").'}),(0,t.jsx)("li",{children:"Address 2: JGE 3 6: Do nothing, because 2 is not \u2265 3."}),(0,t.jsx)("li",{children:'Address 3: LINE 1 1: Append the second line from rev 1 ("b").'}),(0,t.jsx)("li",{children:"Address 4: JL 2 7: Do nothing, because 2 is not < 2."}),(0,t.jsx)("li",{children:'Address 5: LINE 2 2: Append the 3rd line from rev 2 ("1").'}),(0,t.jsx)("li",{children:'Address 6: LINE 2 3: Append the 4th line from rev 2 ("2").'}),(0,t.jsx)("li",{children:'Address 7: LINE 1 2: Append the third line from rev 1 ("c").'}),(0,t.jsx)("li",{children:'Address 8: END: Stop. The final content is "ab12c".'})]})}),(0,t.jsx)(l.default,{value:"r3",label:"Rev 3",children:(0,t.jsxs)("ul",{children:[(0,t.jsx)("li",{children:"Address 0: JL 1 8: Do nothing, because Current Rev (3) is not < 1."}),(0,t.jsx)("li",{children:'Address 1: LINE 1 0: Append the first line from rev 1 ("a").'}),(0,t.jsx)("li",{children:"Address 2: JGE 3 6: Jump to address 6, because 3 \u2265 3."}),(0,t.jsx)("li",{children:'Address 6: LINE 2 3: Append the 4th line from rev 2 ("2").'}),(0,t.jsx)("li",{children:'Address 7: LINE 1 2: Append the third line from rev 1 ("c").'}),(0,t.jsx)("li",{children:'Address 8: END: Stop. The final content is "a2c".'})]})})]}),"\n",(0,t.jsx)(n.h3,{id:"checkout-and-annotate",children:"Checkout and annotate"}),"\n",(0,t.jsxs)(n.p,{children:['Note the lines that are not changed across multiple revisions, such as "a" only\noccurs once as ',(0,t.jsx)(n.code,{children:"LINE 1 0"})," in the bytecode. The ",(0,t.jsx)(n.code,{children:"LINE"})," instruction points to the\nrevision and line that introduces the line. By tracking the operands of ",(0,t.jsx)(n.code,{children:"LINE"}),"\ninstructions in addition to line contents, LineLog could also produce the\n",(0,t.jsx)(n.code,{children:"annotate"})," (also called ",(0,t.jsx)(n.code,{children:"blame"}),") result at the same time."]}),"\n",(0,t.jsx)(n.p,{children:"In LineLog, the checkout and annotate operation are basically the same."}),"\n",(0,t.jsx)(n.h3,{id:"range-of-revisions",children:"Range of revisions"}),"\n",(0,t.jsxs)(n.p,{children:['A variation of the interpretation is to treat "Current Rev" as a range, not a\nsingle fixed revision number. More specifically, given an inclusive range from\n',(0,t.jsx)(n.code,{children:"minRev"})," to ",(0,t.jsx)(n.code,{children:"maxRev"}),", treat ",(0,t.jsx)(n.code,{children:"JL"}),' as "< ',(0,t.jsx)(n.code,{children:"maxRev"}),'", ',(0,t.jsx)(n.code,{children:"JGE"}),' as ">= ',(0,t.jsx)(n.code,{children:"minRev"}),'". This\ncan produce all lines that existed in the revision range, in a reasonable order,\nlike:']}),"\n",(0,t.jsx)(n.p,{children:"rev 1: a\nrev 1: b\nrev 2: 1\nrev 2: 2\nrev 1: c"}),"\n",(0,t.jsx)(n.h3,{id:"linear-history",children:"Linear history"}),"\n",(0,t.jsx)(n.p,{children:"LineLog assumes linear history. The revision comparisons are done using direct\ninteger comparisons. It might be not too difficult to support non-linear\nhistory (i.e.  with merges) by changing the revision comparisons to consider\nthe graph topology. But that hasn't been attempted due to lack of use-cases so\nfar."}),"\n",(0,t.jsx)(n.h2,{id:"editing-linelog",children:"Editing LineLog"}),"\n",(0,t.jsxs)(n.p,{children:["LineLog provides a method for editing: ",(0,t.jsx)(n.code,{children:"replace_lines(brev, a1, a2, b1, b2)"}),".\nIt means replacing the line range ",(0,t.jsx)(n.code,{children:"[a1, a2)"})," from the current checkout to line\nrange ",(0,t.jsx)(n.code,{children:"[b1, b2)"})," in the given ",(0,t.jsx)(n.code,{children:"brev"})," revision. This covers insertion and\ndeletion too. If ",(0,t.jsx)(n.code,{children:"a1"})," equals to ",(0,t.jsx)(n.code,{children:"a2"}),", it is an insertion. If ",(0,t.jsx)(n.code,{children:"b1"})," equals to\n",(0,t.jsx)(n.code,{children:"b2"}),", it means lines from ",(0,t.jsx)(n.code,{children:"a1"})," to ",(0,t.jsx)(n.code,{children:"a2"})," are deleted in revision ",(0,t.jsx)(n.code,{children:"brev"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["This is implemented by appending a block that appends the lines from the\n",(0,t.jsx)(n.code,{children:"brev"}),", and removes lines from ",(0,t.jsx)(n.code,{children:"a"}),". Then change the ",(0,t.jsx)(n.code,{children:"LINE"})," instruction for the\n",(0,t.jsx)(n.code,{children:"a1"})," line to point to the added block."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"# Before             # After\n# Addr: Instruction  # Addr: Instruction\n      : ...                : ...\n    a1: <a1's LINE>     a1 : J len\n  a1+1: ...           a1+1 : ...\n      : ...                : ...\n    a2: ...             a2 : ...\n      : ...                : ...\n   len: N/A            len : JL brev p\n                           : LINE brev b1\n                           : LINE brev b1+1\n                           : ...\n                           : LINE brev b2-1\n                         p : JGE brev a2\n                           : <a1's LINE> (copied)\n                           : J a1+1\n"})}),"\n",(0,t.jsxs)(n.p,{children:["To construct LineLog for a file, one needs to run through the contents of revisions\nof the file in commit order, calculate diffs for adjacent revisions, and then\nfeed LineLog the diffs using the ",(0,t.jsx)(n.code,{children:"replace_lines"})," method."]}),"\n",(0,t.jsxs)(n.p,{children:["Usually ",(0,t.jsx)(n.code,{children:"replace_lines"})," is used to edit the latest revision. However, it can\nalso be used to edit past revisions, if past revisions are checked out. This\nis how the ",(0,t.jsx)(n.code,{children:"absorb"})," command works under the hood."]})]})}function x(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},5525:function(e,n,r){r.r(n),r.d(n,{default:()=>d});var i=r("85893");r("67294");var t=r("74904");let s="tabItem_Ymn6";function d(e){let{children:n,hidden:r,className:d}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,t.Z)(s,d),hidden:r,children:n})}},47902:function(e,n,r){r.r(n),r.d(n,{default:()=>g});var i=r("85893"),t=r("67294"),s=r("74904"),d=r("69599"),l=r("16550"),o=r("32000"),a=r("4520"),c=r("38341"),h=r("76009");function u(e){return t.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||t.isValidElement(e)&&function(e){let{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function x(e){let{value:n,tabValues:r}=e;return r.some(e=>e.value===n)}var p=r("7227");let j="tabList__CuJ",v="tabItem_LNqP";function f(e){let{className:n,block:r,selectedValue:t,selectValue:l,tabValues:o}=e,a=[],{blockElementScrollPositionUntilNextRender:c}=(0,d.o5)(),h=e=>{let n=e.currentTarget,r=o[a.indexOf(n)].value;r!==t&&(c(n),l(r))},u=e=>{let n=null;switch(e.key){case"Enter":h(e);break;case"ArrowRight":{let r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{let r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1]}}n?.focus()};return(0,i.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":r},n),children:o.map(e=>{let{value:n,label:r,attributes:d}=e;return(0,i.jsx)("li",{role:"tab",tabIndex:t===n?0:-1,"aria-selected":t===n,ref:e=>a.push(e),onKeyDown:u,onClick:h,...d,className:(0,s.Z)("tabs__item",v,d?.className,{"tabs__item--active":t===n}),children:r??n},n)})})}function m(e){let{lazy:n,children:r,selectedValue:d}=e,l=(Array.isArray(r)?r:[r]).filter(Boolean);if(n){let e=l.find(e=>e.props.value===d);return e?(0,t.cloneElement)(e,{className:(0,s.Z)("margin-top--md",e.props.className)}):null}return(0,i.jsx)("div",{className:"margin-top--md",children:l.map((e,n)=>(0,t.cloneElement)(e,{key:n,hidden:e.props.value!==d}))})}function b(e){let n=function(e){let{defaultValue:n,queryString:r=!1,groupId:i}=e,s=function(e){let{values:n,children:r}=e;return(0,t.useMemo)(()=>{let e=n??u(r).map(e=>{let{props:{value:n,label:r,attributes:i,default:t}}=e;return{value:n,label:r,attributes:i,default:t}});return!function(e){let n=(0,c.lx)(e,(e,n)=>e.value===n.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}(e),[d,p]=(0,t.useState)(()=>(function(e){let{defaultValue:n,tabValues:r}=e;if(0===r.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!x({value:n,tabValues:r}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${r.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}let i=r.find(e=>e.default)??r[0];if(!i)throw Error("Unexpected error: 0 tabValues");return i.value})({defaultValue:n,tabValues:s})),[j,v]=function(e){let{queryString:n=!1,groupId:r}=e,i=(0,l.k6)(),s=function(e){let{queryString:n=!1,groupId:r}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!r)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:n,groupId:r}),d=(0,a._X)(s);return[d,(0,t.useCallback)(e=>{if(!s)return;let n=new URLSearchParams(i.location.search);n.set(s,e),i.replace({...i.location,search:n.toString()})},[s,i])]}({queryString:r,groupId:i}),[f,m]=function(e){var n;let{groupId:r}=e;let i=(n=r)?`docusaurus.tab.${n}`:null,[s,d]=(0,h.Nk)(i);return[s,(0,t.useCallback)(e=>{if(!!i)d.set(e)},[i,d])]}({groupId:i}),b=(()=>{let e=j??f;return x({value:e,tabValues:s})?e:null})();return(0,o.Z)(()=>{b&&p(b)},[b]),{selectedValue:d,selectValue:(0,t.useCallback)(e=>{if(!x({value:e,tabValues:s}))throw Error(`Can't select invalid tab value=${e}`);p(e),v(e),m(e)},[v,m,s]),tabValues:s}}(e);return(0,i.jsxs)("div",{className:(0,s.Z)("tabs-container",j),children:[(0,i.jsx)(f,{...n,...e}),(0,i.jsx)(m,{...n,...e})]})}function g(e){let n=(0,p.default)();return(0,i.jsx)(b,{...e,children:u(e.children)},String(n))}},50065:function(e,n,r){r.d(n,{Z:function(){return l},a:function(){return d}});var i=r(67294);let t={},s=i.createContext(t);function d(e){let n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);