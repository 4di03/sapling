"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["6906"],{63350:function(e,n,s){s.r(n),s.d(n,{metadata:()=>i,contentTitle:()=>d,default:()=>m,assets:()=>c,toc:()=>a,frontMatter:()=>r});var i=JSON.parse('{"id":"overview/basic-commands","title":"Basic commands","description":"Here are the most commonly used commands in Sapling:","source":"@site/docs/overview/basic-commands.md","sourceDirName":"overview","slug":"/overview/basic-commands","permalink":"/docs/overview/basic-commands","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/sapling/tree/main/website/docs/overview/basic-commands.md","tags":[],"version":"current","sidebarPosition":10,"frontMatter":{"sidebar_position":10},"sidebar":"tutorialSidebar","previous":{"title":"Intro","permalink":"/docs/overview/intro"},"next":{"title":"Smartlog","permalink":"/docs/overview/smartlog"}}'),t=s("85893"),o=s("50065"),l=s("26702");let r={sidebar_position:10},d="Basic commands",c={},a=[{value:"Working with commits",id:"working-with-commits",level:3},{value:"Working with your checkout",id:"working-with-your-checkout",level:3},{value:"Cloning and checking out",id:"cloning-and-checking-out",level:2},{value:"Clone",id:"clone",level:4},{value:"Goto/Checkout",id:"gotocheckout",level:4},{value:"Working copy",id:"working-copy",level:2},{value:"Status",id:"status",level:4},{value:"Diff",id:"diff",level:4},{value:"Add/Remove/Forget",id:"addremoveforget",level:4},{value:"Move/Copy",id:"movecopy",level:4},{value:"Clean",id:"clean",level:4},{value:"Revert",id:"revert",level:4},{value:"Making commits",id:"making-commits",level:2},{value:"Commit",id:"commit",level:4},{value:"Viewing history",id:"viewing-history",level:2},{value:"Show",id:"show",level:4},{value:"Log",id:"log",level:4}];function h(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"basic-commands",children:"Basic commands"})}),"\n",(0,t.jsx)(n.p,{children:"Here are the most commonly used commands in Sapling:"}),"\n",(0,t.jsx)(n.h3,{id:"working-with-commits",children:"Working with commits"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Get"}),(0,t.jsx)(n.th,{children:"View"}),(0,t.jsx)(n.th,{children:"Change"}),(0,t.jsx)(n.th,{children:"Move"}),(0,t.jsx)(n.th,{children:"Remove"}),(0,t.jsx)(n.th,{children:"Fix"}),(0,t.jsx)(n.th,{children:"Stack"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"clone"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"sl"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"amend"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"rebase"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"hide"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"uncommit"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"fold"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"pull"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"show"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"metaedit"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"graft"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"unhide"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"unamend"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"split"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"log"})}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"undo"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"absorb"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"web"})}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"redo"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"histedit"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"restack"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"working-with-your-checkout",children:"Working with your checkout"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"View"}),(0,t.jsx)(n.th,{children:"Move"}),(0,t.jsx)(n.th,{children:"Change"}),(0,t.jsx)(n.th,{children:"Fix"}),(0,t.jsx)(n.th,{children:"Save"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"status"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"goto"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"add"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"revert"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"commit"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"diff"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"next"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"remove"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"clean"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"shelve"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"prev"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"forget"})}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"move"})}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{children:(0,t.jsx)(l.mY,{name:"copy"})}),(0,t.jsx)(n.td,{}),(0,t.jsx)(n.td,{})]})]})]}),"\n",(0,t.jsx)(n.h1,{id:"examples",children:"Examples"}),"\n",(0,t.jsxs)(n.p,{children:["Many of Sapling\u2019s basic commands will be familiar, and perhaps even unremarkable, to existing Git and Mercurial users.  For example, Sapling supports ",(0,t.jsx)(l.mY,{name:"clone"}),", ",(0,t.jsx)(l.mY,{name:"checkout"}),", ",(0,t.jsx)(l.mY,{name:"commit"}),", ",(0,t.jsx)(l.mY,{name:"rebase"}),", ",(0,t.jsx)(l.mY,{name:"push"}),", etc. The goal was not to reinvent the wheel, but to make an intuitive, yet powerful, source control system."]}),"\n",(0,t.jsxs)(n.p,{children:["This document is a casual introduction to some of the basic commands. It is not comprehensive, nor is it a walkthrough of an end-to-end workflow (see the ",(0,t.jsx)(n.a,{href:"/docs/introduction/",children:"Introduction"})," for a simple, end-to-end example). Commands with interesting nuance or for more advanced cases are covered in other documents."]}),"\n",(0,t.jsxs)(n.p,{children:["Many of these examples use the ",(0,t.jsx)(n.code,{children:"sl smartlog"})," output to explain the repo state. See the ",(0,t.jsx)(n.a,{href:"./smartlog",children:"Smartlog doc"})," for an overview of the output format."]}),"\n",(0,t.jsx)(n.h2,{id:"cloning-and-checking-out",children:"Cloning and checking out"}),"\n",(0,t.jsx)(n.h4,{id:"clone",children:"Clone"}),"\n",(0,t.jsxs)(n.p,{children:["Clone the repo using the ",(0,t.jsx)(n.code,{children:"sl clone"})," command."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"# Clones into a 'sapling' directory.\n$ sl clone https://github.com/facebook/sapling\nremote: Enumerating objects: 640374, done.\nremote: Counting objects: 100% (5233/5233), done.\nremote: Compressing objects: 100% (3228/3228), done.\nremote: Total 640374 (delta 1749), reused 5139 (delta 1669), pack-reused 635141\nReceiving objects: 100% (640374/640374), 155.18 MiB | 15.17 MiB/s, done.\nResolving deltas: 100% (431325/431325), done.\nFrom https://github.com/facebook/sapling\n * [new ref]               b8422460814900d8f978a8a34a99ae83c6735a70 -> remote/main\n5689 files updated, 0 files merged, 0 files removed, 0 files unresolved\n\n# Clones into a 'some_directory' directory.\n$ sl clone https://github.com/facebook/sapling some_directory\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"For Git support, Sapling uses Git under the hood for clones, pushes, and pulls. Hence the output matches Git."})}),"\n",(0,t.jsxs)(n.p,{children:["Related topics: ",(0,t.jsx)(n.a,{href:"/docs/overview/push-pull",children:"Push/Pull"}),", Sparse"]}),"\n",(0,t.jsx)(n.h4,{id:"gotocheckout",children:"Goto/Checkout"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl goto"})," or ",(0,t.jsx)(n.code,{children:"sl go"})," allows you to checkout a specific commit.  See the ",(0,t.jsx)(n.a,{href:"/docs/overview/navigation",children:"Navigation"})," document for a variety of other ways to move around your repository."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"# You can checkout commits by their long or short hash.\n# '@' in smartlog indicates your current checkout location.\n$ sl goto 71f7ac009\n$ sl\no  b84224608  13 minutes ago  remote/main\n\u2577\n@  71f7ac009  Today at 10:10  john\n\u2577  scsc: fix build on Windows\n\u2577\n\u2577 o  15de72785  35 seconds ago  mary  my_feature\n\u256D\u2500\u256F  Implement glorious features\n\u2502\no  a555d064c  Wednesday at 09:06\n\u2502\n~\n\n# You can checkout remote bookmark commits, either by `name` or by `remote/name`.\n$ sl goto main\n\n# You can checkout commits pointed at by local bookmarks.\n$ sl goto my_feature\n"})}),"\n",(0,t.jsx)(n.p,{children:"You can checkout a commit while you have pending changes, as long as the checkout does not change files with pending changes."}),"\n",(0,t.jsx)(n.p,{children:"Notable options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-C/--clean"}),"  will remove any pending changes."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Related topics: ",(0,t.jsx)(n.a,{href:"/docs/overview/navigation",children:"Navigation"}),", ",(0,t.jsx)(n.a,{href:"/docs/overview/navigation#topbottom",children:"top/bottom"}),", ",(0,t.jsx)(n.a,{href:"/docs/overview/push-pull",children:"pull"})]}),"\n",(0,t.jsx)(n.h2,{id:"working-copy",children:"Working copy"}),"\n",(0,t.jsx)(n.h4,{id:"status",children:"Status"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl status"})," or ",(0,t.jsx)(n.code,{children:"sl st"})," shows a list of your current uncommitted files."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ vim build.sh\n$ sl st\nM build.sh\n\n$ vim new_file.txt\n$ sl st\nM build.sh\n? new_file.txt\n\n# File state indicators:\n#   M - modified file\n#   A - new file that has been marked with 'sl add'\n#   R - deleted file that has been marked with 'sl remove'\n#   ! - deleted file that has not yet been marked with 'sl remove'\n#   ? - new file that has not yet been marked with 'sl add'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Unlike Git, Sapling does not use a staging area, so any non-? files in the status output will be committed when you run ",(0,t.jsx)(n.code,{children:"sl commit"}),"."]}),"\n",(0,t.jsx)(n.p,{children:"Notable options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--copies"})," shows which files have been marked as moved/copied."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--change COMMIT"})," shows the files changed in a given commit."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"diff",children:"Diff"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl diff"})," shows you the diff output for your current uncommitted changes."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:'$ sl diff\ndiff --git a/build.sh b/build.sh\n--- a/build.sh\n+++ b/build.sh\n@@ -9,6 +9,10 @@\n     PATH="$TOOLCHAIN_DIR:$PATH"\n fi\n\n+if [[ -n $TEST_ENVIRONMENT ]]; then\n+    exit 1\n+fi\n+\n SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")\n\n# Specify a file to only see its changes.\n$ sl diff file.txt\n'})}),"\n",(0,t.jsx)(n.p,{children:"The diff output is compatible with Git\u2019s diff format."}),"\n",(0,t.jsxs)(n.p,{children:["Related topics: ",(0,t.jsx)(n.a,{href:"/docs/overview/basic-commands#show",children:"Show"})]}),"\n",(0,t.jsx)(n.h4,{id:"addremoveforget",children:"Add/Remove/Forget"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl add/remove/forget"})," are used to add new files, remove old files, and undo added files, respectively. Only files marked M/A/R will be committed during ",(0,t.jsx)(n.code,{children:"sl commit"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl st\n? new_file.txt\n\n$ sl add new_file.txt\n$ sl st\nA new_file.txt\n\n$ rm old_file.txt\n$ sl st\nA new_file.txt\n! old_file.txt\n\n$ sl rm old_file.txt\n$ sl st\nA new_file.txt\nR old_file.txt\n\n$ sl forget new_file.txt\n$ sl st\n? new_file.txt\nR old_file.txt\n"})}),"\n",(0,t.jsx)(n.h4,{id:"movecopy",children:"Move/Copy"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl mv/cp"})," can be used to rename or copy a file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl mv old_name.txt new_name.txt\n$ sl st\nA new_name.txt\nR old_name.txt\n\n# Sapling-only repos track the move/copy, which can be viewed with sl st --copies.\n$ sl st --copies\nA new_name.txt\n  old_name.txt\nR old_name.txt\n"})}),"\n",(0,t.jsx)(n.p,{children:"When using Git support, file renames are not recorded since Git does not record this information. When using a normal Sapling repository, the rename/copy will be tracked inside Sapling and used to show accurate log and blame output for the file."}),"\n",(0,t.jsx)(n.p,{children:"Related topics: AutoMove"}),"\n",(0,t.jsx)(n.h4,{id:"clean",children:"Clean"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl clean"})," deletes any untracked files (",(0,t.jsx)(n.code,{children:"?"})," in status) in your working copy."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl st\n? temp_file\n\n$ sl clean\n$ sl st\n"})}),"\n",(0,t.jsx)(n.h4,{id:"revert",children:"Revert"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl revert"})," will revert any pending changes in your working copy."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl st\nM build.sh\n\n$ sl revert build.sh\n$ sl st\n"})}),"\n",(0,t.jsx)(n.p,{children:"Notable options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--all"})," will revert all pending changes, so you don\u2019t need to specify file names."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--rev COMMIT"})," will change the file contents to match their contents in the given commit."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--interactive"})," will open an interactive editor for choosing which files or lines to revert."]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"making-commits",children:"Making commits"}),"\n",(0,t.jsx)(n.h4,{id:"commit",children:"Commit"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl commit"})," commits your pending changes and prompts you for a commit message.  While there is no staging area, the powerful ",(0,t.jsx)(n.code,{children:"--interactive"})," option is used to select specific files or lines you want committed."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl st\nM build.sh\n$ sl commit\n# ...opens your editor so you can write a message...\n\n$ sl\n  @  c178f2e7f  1 second ago mary\n\u256D\u2500\u256F  Fix build.sh\n\u2502\no  b84224608  52 minutes ago  remote/main\n\u2502\n~\n"})}),"\n",(0,t.jsx)(n.p,{children:"Notable options:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"-m/--message MSG"})," allows specifying a message instead of opening an editor."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"--interactive"})," will open an interactive editor for choosing which files or lines to commit.  Lines/files not chosen remain as pending changes."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Related topics: Amend"}),"\n",(0,t.jsx)(n.h2,{id:"viewing-history",children:"Viewing history"}),"\n",(0,t.jsxs)(n.p,{children:["Related: ",(0,t.jsx)(n.a,{href:"/docs/overview/smartlog",children:"smartlog"})]}),"\n",(0,t.jsx)(n.h4,{id:"show",children:"Show"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl show"})," shows the log message and textual diff for the current or given commit."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:'$ sl show\ncommit:   c178f2e7ff20447532370599051c1f1939f9dcb6   (@)\nparent:   b8422460814900d8f978a8a34a99ae83c6735a70\nuser:     Mary Smith <mary@example.com>\ndate:     Mon, 15 Aug 2022 16:56:36 -0700\n\n    My new commit\n\ndiff --git a/build.sh b/build.sh\n--- a/build.sh\n+++ b/build.sh\n@@ -9,6 +9,10 @@\n     PATH="$TOOLCHAIN_DIR:$PATH"\n fi\n\n+if [[ -n $TEST_ENVIRONMENT ]]; then\n+    exit 1\n+fi\n+\n SCRIPT_DIR=$(dirname "${BASH_SOURCE[0]}")\n\n# Can also show a particular commit\n$ sl show COMMIT\n'})}),"\n",(0,t.jsx)(n.h4,{id:"log",children:"Log"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"sl log"})," shows the commit history starting at your current commit."]}),"\n",(0,t.jsxs)(n.p,{children:["Unlike in Git and Mercurial, the ",(0,t.jsx)(n.code,{children:"log"})," command in Sapling is rarely used. Instead, ",(0,t.jsx)(n.code,{children:"smartlog"})," is preferred for day-to-day development and understanding your repository.  ",(0,t.jsx)(n.code,{children:"sl log"})," is really only used when inspecting the deeper history of the repository or a file."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sl-shell-example",children:"$ sl log\nchangeset:   c178f2e7ff20447532370599051c1f1939f9dcb6   (@)\nuser:        Mary Smith <mary@example.com>\ndate:        Mon, 15 Aug 2022 16:56:36 -0700\nsummary:     My new commit\n\nchangeset:   b8422460814900d8f978a8a34a99ae83c6735a70\nuser:        John Adams <john@example.com>\ndate:        Mon, 15 Aug 2022 16:04:08 -0700\nsummary:     globalrevs: lookup globalrevs over edenapi\n\nchangeset:   98f29d99b8b8b8a6562e98faa913a650bd0f0302\nuser:        John Adams <john@example.com>\ndate:        Mon, 15 Aug 2022 15:14:49 -0700\nsummary:     remove glob from scuba logging test\n\nchangeset:   6bec7b92894495229635f481ba01895c869c2063\nuser:        Mary Smith <mary@example.com>\ndate:        Mon, 15 Aug 2022 14:27:14 -0700\nsummary:     fix monitoring for tailer\n\n# Specify a file or directory to see its history\n$ sl log src/build.rs\n\n# Use -fr with a commit to show the history starting from there.\n$ sl log -fr COMMIT src/build.rs\n"})})]})}function m(e={}){let{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},26702:function(e,n,s){s.d(n,{RJ:function(){return c},Xj:function(){return r},bv:function(){return d},mY:function(){return l},nk:function(){return a}});var i=s(85893);s(67294);var t=s(4757),o=s(37308);function l(e){let{name:n,linkText:s}=e,o=function(e){switch(e){case"go":return"goto";case"isl":return"web"}return e}(n),l=s??n;return(0,i.jsx)("a",{href:(0,t.default)(`/docs/commands/${o}`),children:(0,i.jsx)("code",{children:l})})}function r(e){let{name:n}=e;return(0,i.jsx)(l,{name:n,linkText:`sl ${n}`})}function d(){return(0,i.jsx)("p",{style:{textAlign:"center"},children:(0,i.jsx)("img",{src:(0,t.default)("/img/reviewstack-demo.gif"),width:800,align:"center"})})}function c(e){let{alt:n,light:s,dark:l}=e;return(0,i.jsx)(o.Z,{alt:n,sources:{light:(0,t.default)(s),dark:(0,t.default)(l)}})}function a(e){let{src:n}=e;return(0,i.jsx)("video",{controls:!0,children:(0,i.jsx)("source",{src:(0,t.default)(n)})})}},50065:function(e,n,s){s.d(n,{Z:function(){return r},a:function(){return l}});var i=s(67294);let t={},o=i.createContext(t);function l(e){let n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);